"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["823771"],{7210:function(e,n,i){i.r(n),i.d(n,{default:()=>o});var a=i("110239"),r=i("444827");let s=i.p+"static/image/variable-engine-structure.61f2681f.png",t=i.p+"static/image/varaible-zone.4eb441b6.png",l=i.p+"static/image/variable-type1.043500d5.png",c=i.p+"static/image/variable-type2.e5105a8b.png";function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",p:"p",ul:"ul",li:"li",img:"img",h4:"h4"},(0,r.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"variable-engine",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#variable-engine",children:"#"}),"Variable Engine"]}),"\n",(0,a.jsxs)(n.h2,{id:"overall-design",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#overall-design",children:"#"}),"Overall Design"]}),"\n",(0,a.jsxs)(n.h3,{id:"architecture-layers",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#architecture-layers",children:"#"}),"Architecture Layers"]}),"\n",(0,a.jsx)(n.p,{children:":::warning Architecture Layers\nThe variable engine design follows the DIP (Dependency Inversion Principle) and is divided into three layers based on code stability, abstraction level, and proximity to business:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Variable Abstract Layer: The highest level of abstraction and most stable code in the variable architecture"}),"\n",(0,a.jsx)(n.li,{children:"Variable Implementation Layer: The more volatile part of the variable architecture, typically requiring adjustments between different business needs"}),"\n",(0,a.jsx)(n.li,{children:"Variable Business Layer: The Facade provided to business in the variable architecture, interacting with canvas engine and node engine\n:::"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Architecture Layer Diagram",src:s})}),"\n",(0,a.jsxs)(n.h3,{id:"terminology",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#terminology",children:"#"}),"Terminology"]}),"\n",(0,a.jsxs)(n.h4,{id:"-scope",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-scope",children:"#"}),"\uD83C\uDF1F Scope"]}),"\n",(0,a.jsx)(n.p,{children:":::warning ⭐️⭐️⭐️ Definition:\nA conventional space where variable declarations and consumption are described through AST"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Conventional space: The space is entirely defined by business","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"In low-code design state, it can be a node, a component, a right panel..."}),"\n",(0,a.jsx)(n.li,{children:"In code, it can be a Statement, a code block, a function, a file...\n:::"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"What is the scope space? It can be defined by different businesses."}),"\n",(0,a.jsxs)(n.h4,{id:"-abstract-syntax-tree-ast",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-abstract-syntax-tree-ast",children:"#"}),"\uD83C\uDF1F Abstract Syntax Tree (AST)"]}),"\n",(0,a.jsx)(n.p,{children:":::warning Definition:\n⭐️⭐️⭐️ A protocol that combines AST nodes in tree form to achieve explicit/implicit CRUD of variable information"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"AST nodes: Reactive protocol nodes in AST"}),"\n",(0,a.jsx)(n.li,{children:"Explicit CRUD, e.g.: Business explicitly sets a variable's type"}),"\n",(0,a.jsx)(n.li,{children:"Implicit CRUD, e.g.: Business declares a variable, and its type is automatically inferred from initialization parameters\n:::"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:":::warning Variables, types, expressions, structures, and other variable information in the scope are essentially combinations of AST nodes"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Variable -> VariableDeclaration node"}),"\n",(0,a.jsx)(n.li,{children:"Expression -> Expression node"}),"\n",(0,a.jsx)(n.li,{children:"Type -> TypeNode node"}),"\n",(0,a.jsx)(n.li,{children:"Structure -> StructDeclaration node\n:::"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Reference link: ",(0,a.jsx)(n.a,{href:"https://ts-ast-viewer.com/",rel:"noopener noreferrer",target:"_blank",children:"https://ts-ast-viewer.com/"})]}),"\n",(0,a.jsxs)(n.h4,{id:"variable",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#variable",children:"#"}),"Variable"]}),"\n",(0,a.jsx)(n.p,{children:":::warning Definition:\nAn AST node used to declare new variables, using a unique identifier to point to a value that changes within a specific set range"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Value changing within a specific set range: The variable's value must be within the range described by the variable type"}),"\n",(0,a.jsx)(n.li,{children:"Unique identifier: The variable must have a unique Key value\n:::"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"/en/guide/index/assets/variable-code.png.html",children:"Variables in JavaScript, unique Key + pointing to a changing value"})}),"\n",(0,a.jsxs)(n.h4,{id:"variable-type",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#variable-type",children:"#"}),"Variable Type"]}),"\n",(0,a.jsx)(n.p,{children:":::warning Definition:\n⭐️⭐️⭐️ An AST node used to constrain a variable, where the constrained variable value can only change within a predetermined set range"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A variable can be bound to a variable type\n:::"}),"\n"]}),"\n",(0,a.jsx)("table",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("img",{src:l})}),(0,a.jsx)("td",{children:(0,a.jsx)("img",{src:c})})]})}),"\n",(0,a.jsxs)(n.h3,{id:"visual-understanding-of-the-variable-engine",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#visual-understanding-of-the-variable-engine",children:"#"}),"Visual Understanding of the Variable Engine"]}),"\n",(0,a.jsx)(n.p,{children:":::warning Imagine a variable engine world like this:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Define countries through individual scopes"}),"\n",(0,a.jsx)(n.li,{children:"Each country contains three main citizens: declarations, types, and expressions"}),"\n",(0,a.jsx)(n.li,{children:"Countries communicate with each other through scope chains\n:::"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Illustration",src:t})})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(d,e)})):d(e)}let o=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["en%2Fguide%2Findex%2Fvariable-engine.mdx"]={toc:[{id:"overall-design",text:"Overall Design",depth:2},{id:"architecture-layers",text:"Architecture Layers",depth:3},{id:"terminology",text:"Terminology",depth:3},{id:"-scope",text:"\uD83C\uDF1F Scope",depth:4},{id:"-abstract-syntax-tree-ast",text:"\uD83C\uDF1F Abstract Syntax Tree (AST)",depth:4},{id:"variable",text:"Variable",depth:4},{id:"variable-type",text:"Variable Type",depth:4},{id:"visual-understanding-of-the-variable-engine",text:"Visual Understanding of the Variable Engine",depth:3}],title:"Variable Engine",frontmatter:{}}}}]);