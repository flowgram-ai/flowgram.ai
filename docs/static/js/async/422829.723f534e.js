"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["422829"],{829301:function(e,n,i){i.r(n),i.d(n,{default:function(){return t}});var o=i(110239),a=i(444827);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p"},(0,a.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h1,{id:"node-engine",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#node-engine",children:"#"}),"Node Engine"]}),"\n",(0,o.jsx)(n.p,{children:"The Node Engine is a framework for writing flow node logic, allowing businesses to focus on their own rendering and data logic without concerning themselves with underlying canvas and node interaction APIs. Meanwhile, the node engine has established the best node writing paradigms, helping businesses solve various issues that may arise in flow business, such as coupling between data logic and rendering.\nThe node engine is optional. If you don't have these complex node logic requirements, you can choose not to enable the node engine and maintain node data and rendering yourself. Complex node logic includes: 1) Nodes can validate or trigger data side effects without rendering; 2) Rich node interactions; 3) Redo/undo; etc."}),"\n",(0,o.jsxs)(n.h1,{id:"basic-concepts",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#basic-concepts",children:"#"}),"Basic Concepts"]}),"\n",(0,o.jsx)(n.p,{children:"FlowNodeEntity\nFlow node model."}),"\n",(0,o.jsx)(n.p,{children:"FlowNodeRegistry\nStatic configuration of flow nodes."}),"\n",(0,o.jsx)(n.p,{children:"FormMeta\nStatic configuration of the node engine. Configured in the formMeta field of FlowNodeRegistry."}),"\n",(0,o.jsx)(n.p,{children:"Form\nForms in the node engine. It maintains node data and provides rendering, validation, side effects, and other capabilities. Its FormModel provides access to and modification of node data and triggers validation capabilities."}),"\n",(0,o.jsx)(n.p,{children:"Field\nA rendering field in the node form. Note that Form already provides data layer logic, Field is more of a rendering layer model that only exists after form field rendering."}),"\n",(0,o.jsx)(n.p,{children:"validate\nForm validation. Usually includes validation for individual fields and overall form validation."}),"\n",(0,o.jsx)(n.p,{children:"effect\nForm data side effects. Usually refers to specific logic triggered when form data experiences certain events. For example, when a field's data changes and needs to synchronize information to a store, this can be called an effect."}),"\n",(0,o.jsx)(n.p,{children:"FormPlugin\nForm plugins. Can be configured in formMeta, plugins can perform a series of deep operations on forms. Such as variable plugins."})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(d,e)})):d(e)}let t=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["en%2Fguide%2Findex%2Fnode-engine.mdx"]={toc:[],title:"Node Engine",frontmatter:{}}}}]);