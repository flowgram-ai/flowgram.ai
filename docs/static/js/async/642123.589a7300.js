"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["642123"],{718880:function(e,s,a){a.r(s),a.d(s,{default:function(){return t}});var r=a(110239),n=a(444827);function i(e){let s=Object.assign({h1:"h1",a:"a",h2:"h2",pre:"pre",code:"code",p:"p"},(0,n.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.h1,{id:"disposable",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#disposable",children:"#"}),"Disposable"]}),"\n",(0,r.jsxs)(s.h2,{id:"interface",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#interface",children:"#"}),"Interface"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",meta:"",children:"/**\n * An object that performs a cleanup operation when `.dispose()` is called.\n *\n * Some examples of how disposables are used:\n *\n * - An event listener that removes itself when `.dispose()` is called.\n * - The return value from registering a provider. When `.dispose()` is called, the provider is unregistered.\n */\nexport interface Disposable {\n  dispose(): void;\n}\n"})}),"\n",(0,r.jsxs)(s.h2,{id:"source-code",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#source-code",children:"#"}),"Source Code"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"https://github.com/flowgram-ai/flowgram.ai/blob/main/packages/common/utils/src/disposable.ts",rel:"noopener noreferrer",target:"_blank",children:"https://github.com/flowgram-ai/flowgram.ai/blob/main/packages/common/utils/src/disposable.ts"})})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,n.ah)(),e.components);return s?(0,r.jsx)(s,Object.assign({},e,{children:(0,r.jsx)(i,e)})):i(e)}let t=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["en%2Fapi%2Futils%2Fdisposable.mdx"]={toc:[{id:"interface",text:"Interface",depth:2},{id:"source-code",text:"Source Code",depth:2}],title:"Disposable",frontmatter:{}}}}]);