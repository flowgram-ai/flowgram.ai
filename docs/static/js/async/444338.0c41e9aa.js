"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["444338"],{573712:function(e,n,t){t.r(n),t.d(n,{default:function(){return s}});var o=t(110239),a=t(444827),d=t(156973);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h3:"h3",ul:"ul",li:"li",pre:"pre",div:"div"},(0,a.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h1,{id:"create-a-fixed-layout-canvas",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#create-a-fixed-layout-canvas",children:"#"}),"Create a Fixed Layout Canvas"]}),"\n",(0,o.jsxs)(n.p,{children:["This case can be installed by ",(0,o.jsx)(n.code,{children:"npx @flowgram.ai/create-app@latest fixed-layout-simple"}),", the complete code and effect are as follows:"]}),"\n",(0,o.jsx)("div",{className:"rs-tip",children:(0,o.jsx)("a",{className:"rs-link",href:"/flowgram.ai/examples/fixed-layout/fixed-layout-simple.html",children:(0,o.jsx)(n.p,{children:"Fixed Layout Basic Usage"})})}),"\n",(0,o.jsxs)(n.h3,{id:"1-canvas-entry",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-canvas-entry",children:"#"}),"1. Canvas Entry"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"FixedLayoutEditorProvider"}),": Canvas configurator, internally generates a react-context for consumption by child components"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"EditorRenderer"}),": The final rendered canvas, can be wrapped in other components to customize the canvas position"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",meta:'pure title="app.tsx"',children:"\nimport {\n  FixedLayoutEditorProvider,\n  EditorRenderer,\n} from '@flowgram.ai/fixed-layout-editor';\n\nimport { useEditorProps } from './use-editor-props' // Canvas detailed props configuration\nimport { Tools } from './tools' // Canvas tools\n\nfunction App() {\n  const editorProps = useEditorProps()\n  return (\n    <FixedLayoutEditorProvider {...editorProps}>\n      <EditorRenderer className=\"demo-editor\" />\n      <Tools />\n    </FixedLayoutEditorProvider>\n  );\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"2-configure-canvas",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-configure-canvas",children:"#"}),"2. Configure Canvas"]}),"\n",(0,o.jsx)(n.p,{children:"Canvas configuration uses declarative, providing data, rendering, event, plugin related configurations"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",meta:'pure title="use-editor-props.tsx"',children:"import { useMemo } from 'react';\nimport { type FixedLayoutProps } from '@flowgram.ai/fixed-layout-editor';\nimport { defaultFixedSemiMaterials } from '@flowgram.ai/fixed-semi-materials';\nimport { createMinimapPlugin } from '@flowgram.ai/minimap-plugin';\n\nimport { intialData } from './initial-data' // Initial data\nimport { nodeRegistries } from './node-registries' // Node declaration configuration\nimport { BaseNode } from './base-node' // Node rendering\n\nexport function useEditorProps(\n): FixedLayoutProps {\n  return useMemo<FixedLayoutProps>(\n    () => ({\n      /**\n       * Initial data\n       */\n      initialData,\n      /**\n       * Canvas node definition\n       */\n      nodeRegistries,\n      /**\n       * Custom UI components can be defined by key, for example, add a button, here is a semi-component set for quick verification, if you need deep customization, refer to:\n       * https://github.com/flowgram-ai/flowgram.ai/blob/main/packages/materials/fixed-semi-materials/src/components/index.tsx\n       */\n      materials: {\n        renderNodes: {\n          ...defaultFixedSemiMaterials,\n          // [FlowRendererKey.ADDER]: NodeAdder,\n          // [FlowRendererKey.BRANCH_ADDER]: BranchAdder,\n        },\n        renderDefaultNode: BaseNode, // Node rendering component\n      },\n      /**\n       * Node engine, used to render node form\n       */\n      nodeEngine: {\n        enable: true,\n      },\n      /**\n       * Canvas history, used to control redo/undo\n       */\n      history: {\n        enable: true,\n        enableChangeNode: true, // Used to listen to node form data changes\n      },\n      /**\n       * Canvas initialization callback\n       */\n      onInit: ctx => {\n        // If you want to dynamically load data, you can execute it asynchronously by the following method\n        // ctx.docuemnt.fromJSON(initialData)\n      },\n      /**\n       * Canvas first rendering completed callback\n       */\n      onAllLayersRendered: (ctx) => {},\n      /**\n       * Canvas destruction callback\n       */\n      onDispose: () => { },\n      plugins: () => [\n        /**\n         * Minimap plugin\n         */\n        createMinimapPlugin({}),\n      ],\n    }),\n    [],\n  );\n}\n\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"3-configure-data",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-configure-data",children:"#"}),"3. Configure Data"]}),"\n",(0,o.jsx)(n.p,{children:"Canvas document data uses a tree structure, supports nesting"}),"\n",(0,o.jsxs)(n.div,{className:"rspress-directive note",children:[(0,o.jsx)(n.div,{className:"rspress-directive-title",children:"Document data basic structure:"}),(0,o.jsx)(n.div,{className:"rspress-directive-content",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["nodes ",(0,o.jsx)(n.code,{children:"array"})," Node list, supports nesting"]}),"\n"]})})]}),"\n",(0,o.jsxs)(n.div,{className:"rspress-directive note",children:[(0,o.jsx)(n.div,{className:"rspress-directive-title",children:"Node data basic structure:"}),(0,o.jsx)(n.div,{className:"rspress-directive-content",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["id: ",(0,o.jsx)(n.code,{children:"string"})," Node unique identifier, must be unique"]}),"\n",(0,o.jsxs)(n.li,{children:["meta: ",(0,o.jsx)(n.code,{children:"object"})," Node ui configuration information, such as free layout ",(0,o.jsx)(n.code,{children:"position"})," information"]}),"\n",(0,o.jsxs)(n.li,{children:["type: ",(0,o.jsx)(n.code,{children:"string | number"})," Node type, will correspond to ",(0,o.jsx)(n.code,{children:"type"})," in ",(0,o.jsx)(n.code,{children:"nodeRegistries"})]}),"\n",(0,o.jsxs)(n.li,{children:["data: ",(0,o.jsx)(n.code,{children:"object"})," Node form data"]}),"\n",(0,o.jsxs)(n.li,{children:["blocks: ",(0,o.jsx)(n.code,{children:"array"})," Node branch, using ",(0,o.jsx)(n.code,{children:"block"})," is more in line with ",(0,o.jsx)(n.code,{children:"Gramming"})]}),"\n"]})})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",meta:'pure title="initial-data.tsx"',children:"import { FlowDocumentJSON } from '@flowgram.ai/fixed-layout-editor';\n\n/**\n * Configure workflow data, data is in the format of nested blocks\n */\nexport const initialData: FlowDocumentJSON = {\n  nodes: [\n    // Start node\n    {\n      id: 'start_0',\n      type: 'start',\n      data: {\n        title: 'Start',\n        content: 'start content'\n      },\n      blocks: [],\n    },\n    // Branch node\n    {\n      id: 'condition_0',\n      type: 'condition',\n      data: {\n        title: 'Condition'\n      },\n      blocks: [\n        {\n          id: 'branch_0',\n          type: 'block',\n          data: {\n            title: 'Branch 0',\n            content: 'branch 1 content'\n          },\n          blocks: [\n            {\n              id: 'custom_0',\n              type: 'custom',\n              data: {\n                title: 'Custom',\n                content: 'custrom content'\n              },\n            },\n          ],\n        },\n        {\n          id: 'branch_1',\n          type: 'block',\n          data: {\n            title: 'Branch 1',\n            content: 'branch 1 content'\n          },\n          blocks: [],\n        },\n      ],\n    },\n    // End node\n    {\n      id: 'end_0',\n      type: 'end',\n      data: {\n        title: 'End',\n        content: 'end content'\n      },\n    },\n  ],\n};\n\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"4-declare-node",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-declare-node",children:"#"}),"4. Declare Node"]}),"\n",(0,o.jsx)(n.p,{children:"Declare node can be used to determine the type and rendering method of the node"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",meta:'pure title="node-registries.tsx"',children:"import { FlowNodeRegistry, ValidateTrigger } from '@flowgram.ai/fixed-layout-editor';\n\n/**\n * Custom node registration\n */\nexport const nodeRegistries: FlowNodeRegistry[] = [\n  {\n    /**\n     * Custom node type\n     */\n    type: 'condition',\n    /**\n     * Custom node extension:\n     *  - loop: Extended to loop node\n     *  - start: Extended to start node\n     *  - dynamicSplit: Extended to branch node\n     *  - end: Extended to end node\n     *  - tryCatch: Extended to tryCatch node\n     *  - default: Extended to normal node (default)\n     */\n    extend: 'dynamicSplit',\n    /**\n     * Node configuration information\n     */\n    meta: {\n      // isStart: false, // Whether it is a start node\n      // isNodeEnd: false, // Whether it is an end node, the node after the end node cannot be added\n      // draggable: false, // Whether it can be dragged, such as the start node and the end node cannot be dragged\n      // selectable: false, // The trigger start node cannot be selected\n      // deleteDisable: true, // Disable deletion\n      // copyDisable: true, // Disable copy\n      // addDisable: true, // Disable addition\n    },\n    /**\n     * Configure node form validation and rendering,\n     * Note: validate uses data and rendering separation, ensuring that even if the node is not rendered, the data can be validated\n     */\n    formMeta: {\n      validateTrigger: ValidateTrigger.onChange,\n      validate: {\n        title: ({ value }) => (value ? undefined : 'Title is required'),\n      },\n      /**\n       * Render form\n       */\n      render: () => (\n       <>\n          <Field name=\"title\">\n            {({ field }) => <div className=\"demo-free-node-title\">{field.value}</div>}\n          </Field>\n          <Field name=\"content\">\n            {({ field }) => <input onChange={field.onChange} value={field.value}/>}\n          </Field>\n        </>\n      )\n    },\n  },\n];\n\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"5-render-node",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-render-node",children:"#"}),"5. Render Node"]}),"\n",(0,o.jsx)(n.p,{children:"The rendering node is used to add styles, events, and form rendering positions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",meta:'pure title="base-node.tsx"',children:"import { useNodeRender } from '@flowgram.ai/fixed-layout-editor';\n\nexport const BaseNode = () => {\n  /**\n   * Provides methods related to node rendering\n   */\n  const nodeRender = useNodeRender();\n  /**\n   * Forms can only be used when the node engine is enabled\n   */\n  const form = nodeRender.form;\n\n  return (\n    <div\n      className=\"demo-fixed-node\"\n      onMouseEnter={nodeRender.onMouseEnter}\n      onMouseLeave={nodeRender.onMouseLeave}\n      onMouseDown={e => {\n        // Trigger drag\n        nodeRender.startDrag(e);\n        e.stopPropagation();\n      }}\n      style={{\n        // BlockOrderIcon represents the first node of a branch, BlockIcon represents the header node of the entire condition\n        ...(nodeRender.isBlockOrderIcon || nodeRender.isBlockIcon ? { width: 260 } : {}),\n        outline: form?.state.invalid ? '1px solid red' : 'none', // Red border for form validation errors\n      }}\n    >\n      {\n        // Form rendering is generated through formMeta\n        form?.render()\n      }\n    </div>\n  );\n};\n\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"6-add-tools",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-add-tools",children:"#"}),"6. Add Tools"]}),"\n",(0,o.jsxs)(n.p,{children:["Tools are mainly used to control canvas zooming and other operations. Tools are consolidated in ",(0,o.jsx)(n.code,{children:"usePlaygroundTools"}),", while ",(0,o.jsx)(n.code,{children:"useClientContext"})," is used to get the canvas context, which contains core modules such as ",(0,o.jsx)(n.code,{children:"history"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",meta:'pure title="tools.tsx"',children:"import { useEffect, useState } from 'react'\nimport { usePlaygroundTools, useClientContext } from '@flowgram.ai/fixed-layout-editor';\n\nexport function Tools() {\n  const { history } = useClientContext();\n  const tools = usePlaygroundTools();\n  const [canUndo, setCanUndo] = useState(false);\n  const [canRedo, setCanRedo] = useState(false);\n\n  useEffect(() => {\n    const disposable = history.undoRedoService.onChange(() => {\n      setCanUndo(history.canUndo());\n      setCanRedo(history.canRedo());\n    });\n    return () => disposable.dispose();\n  }, [history]);\n\n  return <div style={{ position: 'absolute', zIndex: 10, bottom: 16, left: 16, display: 'flex', gap: 8 }}>\n    <button onClick={() => tools.zoomin()}>ZoomIn</button>\n    <button onClick={() => tools.zoomout()}>ZoomOut</button>\n    <button onClick={() => tools.fitView()}>Fitview</button>\n    <button onClick={() => tools.changeLayout()}>ChangeLayout</button>\n    <button onClick={() => history.undo()} disabled={!canUndo}>Undo</button>\n    <button onClick={() => history.redo()} disabled={!canRedo}>Redo</button>\n    <span>{Math.floor(tools.zoom * 100)}%</span>\n  </div>\n}\n\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"7-effect",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-effect",children:"#"}),"7. Effect"]}),"\n","\n",(0,o.jsx)("div",{style:{position:"relative",width:"100%",height:"600px"},children:(0,o.jsx)(d.zQ,{})})]})}function r(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(i,e)})):i(e)}let s=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["en%2Fguide%2Fgetting-started%2Fcreate-fixed-layout-simple.mdx"]={toc:[{id:"1-canvas-entry",text:"1. Canvas Entry",depth:3},{id:"2-configure-canvas",text:"2. Configure Canvas",depth:3},{id:"3-configure-data",text:"3. Configure Data",depth:3},{id:"4-declare-node",text:"4. Declare Node",depth:3},{id:"5-render-node",text:"5. Render Node",depth:3},{id:"6-add-tools",text:"6. Add Tools",depth:3},{id:"7-effect",text:"7. Effect",depth:3}],title:"Create a Fixed Layout Canvas",frontmatter:{}}}}]);