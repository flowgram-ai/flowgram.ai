"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["440235"],{73335:function(n,e,o){o.r(e),o.d(e,{default:function(){return i}});var r=o(110239),a=o(444827);function t(n){let e=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",h2:"h2"},(0,a.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"flowoperationservice",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#flowoperationservice",children:"#"}),"FlowOperationService"]}),"\n",(0,r.jsx)(e.p,{children:"节点操作服务, 目前用于固定布局，自由布局现阶段可通过 WorkflowDocument 直接操作, 后续也会抽象出 operation"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://flowgram-ai.github.io/flowgram.ai/auto-docs/fixed-layout-editor/interfaces/FlowOperationService.html",rel:"noopener noreferrer",target:"_blank",children:"> API Detail"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",meta:"pure",children:"const operationService = useService<FlowOperationService>(FlowOperationService)\noperationService.addNode({ id: 'xxx', type: 'custom', data: {} })\n\n// or\nconst ctx = useClientContext();\nctx.operation.addNode({ id: 'xxx', type: 'custom', data: {} })\n\n\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"interface",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#interface",children:"#"}),"Interface"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",meta:"pure",children:"\nexport interface FlowOperationBaseService extends Disposable {\n  /**\n   * 执行操作\n   * @param operation 可序列化的操作\n   * @returns 操作返回\n   */\n  apply(operation: FlowOperation): any;\n\n  /**\n   * 添加节点，如果节点已经存在则不会重复创建\n   * @param nodeJSON 节点数据\n   * @param config 配置\n   * @returns 成功添加的节点\n   */\n  addNode(nodeJSON: FlowNodeJSON, config?: AddNodeConfig): FlowNodeEntity;\n\n  /**\n   * 基于某一个起始节点往后面添加\n   * @param fromNode 起始节点\n   * @param nodeJSON 添加的节点JSON\n   */\n  addFromNode(fromNode: FlowNodeEntityOrId, nodeJSON: FlowNodeJSON): FlowNodeEntity;\n\n  /**\n   * 删除节点\n   * @param node 节点\n   * @returns\n   */\n  deleteNode(node: FlowNodeEntityOrId): void;\n\n  /**\n   * 批量删除节点\n   * @param nodes\n   */\n  deleteNodes(nodes: FlowNodeEntityOrId[]): void;\n\n  /**\n   * 添加块（分支）\n   * @param target 目标\n   * @param blockJSON 块数据\n   * @param config 配置\n   * @returns\n   */\n  addBlock(\n    target: FlowNodeEntityOrId,\n    blockJSON: FlowNodeJSON,\n    config?: AddBlockConfig,\n  ): FlowNodeEntity;\n\n  /**\n   * 移动节点\n   * @param node 被移动的节点\n   * @param config 移动节点配置\n   */\n  moveNode(node: FlowNodeEntityOrId, config?: MoveNodeConfig): void;\n\n  /**\n   * 拖拽节点\n   * @param param0\n   * @returns\n   */\n  dragNodes({ dropNode, nodes }: { dropNode: FlowNodeEntity; nodes: FlowNodeEntity[] }): void;\n\n  /**\n   * 添加节点的回调\n   */\n  onNodeAdd: Event<OnNodeAddEvent>;\n}\n\nexport interface FlowOperationService extends FlowOperationBaseService {\n  /**\n   * 创建分组\n   * @param nodes 节点列表\n   */\n  createGroup(nodes: FlowNodeEntity[]): FlowNodeEntity | undefined;\n  /**\n   * 取消分组\n   * @param groupNode\n   */\n  ungroup(groupNode: FlowNodeEntity): void;\n  /**\n   * 开始事务\n   */\n  startTransaction(): void;\n  /**\n   * 结束事务\n   */\n  endTransaction(): void;\n  /**\n   * 修改表单数据\n   * @param node 节点\n   * @param path 属性路径\n   * @param value 值\n   */\n  setFormValue(node: FlowNodeEntityOrId, path: string, value: unknown): void;\n}\n"})})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(t,n)})):t(n)}let i=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["zh%2Fapi%2Fservices%2Fflow-operation-service.mdx"]={toc:[{id:"interface",text:"Interface",depth:2}],title:"FlowOperationService",frontmatter:{}}}}]);