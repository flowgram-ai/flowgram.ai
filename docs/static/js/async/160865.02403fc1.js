"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["160865"],{286904:function(e,n,o){o.r(n),o.d(n,{default:function(){return i}});var r=o(110239),a=o(444827);function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",h2:"h2"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"flowoperationservice",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#flowoperationservice",children:"#"}),"FlowOperationService"]}),"\n",(0,r.jsx)(n.p,{children:"Node operation service, currently used for fixed layout, free layout can currently be operated directly through WorkflowDocument, and will be abstracted out as operation in the future"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://flowgram-ai.github.io/flowgram.ai/auto-docs/fixed-layout-editor/interfaces/FlowOperationService.html",rel:"noopener noreferrer",target:"_blank",children:"> API Detail"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",meta:"pure",children:"const operationService = useService<FlowOperationService>(FlowOperationService)\noperationService.addNode({ id: 'xxx', type: 'custom', data: {} })\n\n// or\nconst ctx = useClientContext();\nctx.operation.addNode({ id: 'xxx', type: 'custom', data: {} })\n\n\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"interface",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#interface",children:"#"}),"Interface"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",meta:"pure",children:"\nexport interface FlowOperationBaseService extends Disposable {\n  /**\n   * Execute operation\n   * @param operation Serializable operation\n   * @returns Operation return\n   */\n  apply(operation: FlowOperation): any;\n\n  /**\n   * Add node, if the node already exists, it will not be created repeatedly\n   * @param nodeJSON Node data\n   * @param config Configuration\n   * @returns Successfully added node\n   */\n  addNode(nodeJSON: FlowNodeJSON, config?: AddNodeConfig): FlowNodeEntity;\n\n  /**\n   * Add node based on a starting node\n   * @param fromNode Starting node\n   * @param nodeJSON Added node JSON\n   */\n  addFromNode(fromNode: FlowNodeEntityOrId, nodeJSON: FlowNodeJSON): FlowNodeEntity;\n\n  /**\n   * Delete node\n   * @param node Node\n   * @returns\n   */\n  deleteNode(node: FlowNodeEntityOrId): void;\n\n  /**\n   * Batch delete nodes\n   * @param nodes\n   */\n  deleteNodes(nodes: FlowNodeEntityOrId[]): void;\n\n  /**\n   * Add block (branch)\n   * @param target Target\n   * @param blockJSON Block data\n   * @param config Configuration\n   * @returns\n   */\n  addBlock(\n    target: FlowNodeEntityOrId,\n    blockJSON: FlowNodeJSON,\n    config?: AddBlockConfig,\n  ): FlowNodeEntity;\n\n  /**\n   * Move node\n   * @param node The node to be moved\n   * @param config Move node configuration\n   */\n  moveNode(node: FlowNodeEntityOrId, config?: MoveNodeConfig): void;\n\n  /**\n   * Drag node\n   * @param param0\n   * @returns\n   */\n  dragNodes({ dropNode, nodes }: { dropNode: FlowNodeEntity; nodes: FlowNodeEntity[] }): void;\n\n  /**\n   * Add node callback\n   */\n  onNodeAdd: Event<OnNodeAddEvent>;\n}\n\nexport interface FlowOperationService extends FlowOperationBaseService {\n  /**\n   * Create group\n   * @param nodes Node list\n   */\n  createGroup(nodes: FlowNodeEntity[]): FlowNodeEntity | undefined;\n  /**\n   * Ungroup\n   * @param groupNode\n   */\n  ungroup(groupNode: FlowNodeEntity): void;\n  /**\n   * Start transaction\n   */\n  startTransaction(): void;\n  /**\n   * End transaction\n   */\n  endTransaction(): void;\n  /**\n   * Modify form data\n   * @param node Node\n   * @param path Property path\n   * @param value Value\n   */\n  setFormValue(node: FlowNodeEntityOrId, path: string, value: unknown): void;\n}\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(t,e)})):t(e)}let i=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["en%2Fapi%2Fservices%2Fflow-operation-service.mdx"]={toc:[{id:"interface",text:"Interface",depth:2}],title:"FlowOperationService",frontmatter:{}}}}]);