"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["752273"],{159028:function(e,n,r){e.exports=r.p+"static/image/field-array.cade6f8d.gif"},201971:function(e,n,r){e.exports=r.p+"static/image/form-effect.1fbd8b32.gif"},499289:function(e,n,r){e.exports=r.p+"static/image/form-validate.b37371e5.gif"},491074:function(e,n,r){r.r(n),r.d(n,{default:function(){return c}});var i=r(110239),a=r(444827),d=r(159028),t=r(499289),l=r(201971);function o(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",p:"p",pre:"pre",code:"code",div:"div",ul:"ul",li:"li",ol:"ol"},(0,a.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"form",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#form",children:"#"}),"Form"]}),"\n",(0,i.jsxs)(n.h2,{id:"config",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#config",children:"#"}),"Config"]}),"\n",(0,i.jsxs)(n.h3,{id:"enable-node-engine",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#enable-node-engine",children:"#"}),"Enable Node Engine"]}),"\n",(0,i.jsx)(n.p,{children:"Node engine is required to use form"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:'pure title="use-editor-props.ts"',children:"\n// EditorProps\n{\n  nodeEngine: {\n    /**\n     * Node engine is required to use form\n     */\n    enable: true\n    /**\n     * The component to render when the node has an error\n     */\n    nodeErrorRender?: NodeErrorRender;\n    /**\n     * The component to render when the node has no content\n     */\n    nodePlaceholderRender?: NodePlaceholderRender;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"node-configuration-formmeta",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#node-configuration-formmeta",children:"#"}),"Node Configuration formMeta"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:'pure title="node-registries.ts"',children:"import { FlowNodeRegistry, ValidateTrigger } from '@flowgram.ai/fixed-layout-editor';\n\nexport const nodeRegistries: FlowNodeRegistry[] = [\n  {\n    type: 'start',\n    /**\n     * Configure the validation and rendering of the node form\n     */\n    formMeta: {\n      validateTrigger: ValidateTrigger.onChange,\n      validate: {\n        content: ({ value }) => (value ? undefined : 'Content is required'),\n      },\n      /**\n       * Render form\n       */\n      render: () => (\n       <>\n          <Field<string> name=\"title\">\n            {({ field }) => <div className=\"demo-free-node-title\">{field.value}</div>}\n          </Field>\n          <Field<string> name=\"content\">\n            {({ field, fieldState }) => (\n              <>\n                <input onChange={field.onChange} value={field.value}/>\n                {fieldState?.invalid && <Feedback errors={fieldState?.errors}/>}\n              </>\n            )}\n          </Field>\n        </>\n      )\n    },\n  }\n]\n\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"add-form-to-node-rendering",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#add-form-to-node-rendering",children:"#"}),"Add form to node rendering"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:'pure title="base-node.tsx"',children:'\nexport const BaseNode = () => {\n  /**\n   * Provide methods related to node rendering\n   */\n  const { form } = useNodeRender()\n  return (\n    <div className="demo-free-node" className={form?.state.invalid && "error"}>\n      {\n        // The form is rendered through formMeta\n        form?.render()\n      }\n    </div>\n  )\n};\n\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"field",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#field",children:"#"}),"Field"]}),"\n",(0,i.jsx)(n.p,{children:"The rendering part of Field, supports three writing methods, as follows:"}),"\n",(0,i.jsxs)(n.div,{className:"rspress-directive note",children:[(0,i.jsx)(n.div,{className:"rspress-directive-title",children:"NOTE"}),(0,i.jsxs)(n.div,{className:"rspress-directive-content",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"renderProps"})," parameter"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"field"}),"\n",(0,i.jsx)(n.li,{children:"fieldState"}),"\n",(0,i.jsx)(n.li,{children:"formState"}),"\n"]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:"pure",children:'const render = () => (\n  <div>\n    <Label> 1. Through children </Label>\n    // This method is suitable for simple scenarios, Field will inject value onChange, etc. directly into the first layer of children components\n    <Field name="c">\n      <Input />\n    </Field>\n    <Label> 2. Through Render Props  </Label>\n    // This method is suitable for complex scenarios, when the returned component has multiple layers of nesting, the user can actively inject the attributes of field into the desired component\n    <Field name="a">\n        {({ field, fieldState, formState }: FieldRenderProps<string>) => <div><Input {...field} /><Feedbacks errors={fieldState.errors}/></div>}\n    </Field>\n\n    <Label> 3. Through render function </Label>\n    // This method is similar to method 2, but the props are passed in\n    <Field name="b" render={({ field }: FieldRenderProps<string>) => <Input {...field} />} />\n  </div>\n);\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"filedarray",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#filedarray",children:"#"}),"FiledArray"]}),"\n",(0,i.jsx)(n.p,{children:"The following example shows:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The writing method of the array"}),"\n",(0,i.jsx)(n.li,{children:"How to configure the validation of the array item"}),"\n",(0,i.jsx)(n.li,{children:"How to display the error of the array item"}),"\n"]}),"\n",(0,i.jsx)("div",{className:"rs-center",children:(0,i.jsx)("img",{src:d,style:{maxWidth:600}})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"import {\n  Field,\n  FieldArray,\n  FieldArrayRenderProps,\n  FieldRenderProps,\n  FormMeta,\n  FormRenderProps,\n  ValidateTrigger,\n} from '@flowgram.ai/fixed-layout-editor';\nimport Label from '@douyinfe/semi-ui/lib/es/form/label';\nimport { Button, Input } from '@douyinfe/semi-ui';\n\nimport { Feedback } from '../components/feedback';\n\ninterface FormData {\n  arr: string[];\n}\n\nexport const renderNodeWithArray = ({ form }: FormRenderProps<FormData>) => (\n  <>\n    <Label> My array </Label>\n    <FieldArray name=\"arr\">\n      {({ field }: FieldArrayRenderProps<string>) => (\n        <>\n          {field.map((child, index) => (\n            <div key={child.key} className=\"array-item-wrapper\">\n              <Field name={child.name}>\n                {({ field: childField, fieldState: childState }: FieldRenderProps<string>) => (\n                  <div>\n                    <Input {...childField} /> <Feedback errors={childState?.errors} />\n                  </div>\n                )}\n              </Field>\n              <Button style={{ marginLeft: 8 }} onClick={() => field.delete(index)}>\n                del\n              </Button>\n            </div>\n          ))}\n          <div>\n            <Button\n              style={{ marginTop: 8, width: 200 }}\n              onClick={() => field.append('default value')}\n            >\n              Add\n            </Button>\n          </div>\n        </>\n      )}\n    </FieldArray>\n  </>\n);\n\nexport const arrayMeta: FormMeta = {\n  render: renderNodeWithArray,\n  validateTrigger: ValidateTrigger.onChange,\n  // The name in the validate map supports fuzzy matching\n  validate: {\n    ['arr.*']: () => 'array item error',\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"validation",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#validation",children:"#"}),"Validation"]}),"\n",(0,i.jsxs)(n.h3,{id:"validation-configuration",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#validation-configuration",children:"#"}),"Validation Configuration"]}),"\n",(0,i.jsx)(n.p,{children:"Validation logic is configured globally, and the validation logic is declared by the form item path"}),"\n",(0,i.jsx)("div",{className:"rs-center",children:(0,i.jsx)("img",{src:t,style:{maxWidth:600}})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"export const renderValidateExample = ({ form }: FormRenderProps<FormData>) => (\n  <>\n    <Label> a (Maximum length is 5)</Label>\n    <Field name=\"a\">\n      {({ field: { value, onChange }, fieldState }: FieldRenderProps<string>) => (\n        <>\n          <Input value={value} onChange={onChange} />\n          <Feedback errors={fieldState?.errors} />\n        </>\n      )}\n    </Field>\n    <Label> b (If a exists, b can be optional) </Label>\n    <Field\n      name=\"b\"\n      render={({ field: { value, onChange }, fieldState }: FieldRenderProps<string>) => (\n        <>\n          <Input value={value} onChange={onChange} />\n          <Feedback errors={fieldState?.errors} />\n        </>\n  )}\n/>\n  </>\n);\n\nexport const VALIDATE_EXAMPLE: FormMeta = {\n  render: renderValidateExample,\n  // Validation timing configuration\n  validateTrigger: ValidateTrigger.onChange,\n  validate: {\n    // Simply validate the value\n    a: ({ value }) => (value.length > 5 ? 'Maximum length is 5' : undefined),\n    // Validate the value depends on the value of other form items\n    b: ({ value, formValues }) => {\n      if (formValues.a) {\n        return undefined;\n      } else {\n        return value ? 'undefined' : 'a exists when b is required';\n      }\n    },\n    // Validate the value depends on the node or canvas information\n    c: ({ value, formValues, context }) => {\n      const { nodeï¼Œ playgroundContext } = context;\n      // The logic is omitted here\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"validation-timing",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#validation-timing",children:"#"}),"Validation Timing"]}),"\n",(0,i.jsxs)("table",{className:"rs-table",children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.code,{children:"ValidateTrigger.onChange"})}),(0,i.jsx)("td",{children:"Validate when the form data changes (does not include initial data)"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.code,{children:"ValidateTrigger.onBlur"})}),(0,i.jsx)("td",{children:"Validate when the form item input control is onBlur"})]})]}),"\n",(0,i.jsxs)(n.h3,{id:"path-fuzzy-matching",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#path-fuzzy-matching",children:"#"}),"Path Fuzzy Matching"]}),"\n",(0,i.jsx)(n.p,{children:"The path (key) of the validation configuration supports fuzzy matching, which is usually used in the array scenario, see the following example"}),"\n",(0,i.jsx)("div",{className:"rs-red",children:(0,i.jsx)(n.p,{children:"Note: * represents only one level of drilling down"})}),"\n",(0,i.jsxs)("table",{className:"rs-table",children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.code,{children:"arr.*"})}),(0,i.jsxs)("td",{children:[(0,i.jsx)(n.code,{children:"arr"})," field's all first-level sub-items"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.code,{children:"arr.x.*"})}),(0,i.jsxs)("td",{children:[(0,i.jsx)(n.code,{children:"arr.x"})," all first-level sub-items"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.code,{children:"arr.*.x"})}),(0,i.jsxs)("td",{children:[(0,i.jsx)(n.code,{children:"arr"})," all first-level sub-items' sub-items ",(0,i.jsx)(n.code,{children:"x"})]})]})]}),"\n",(0,i.jsxs)(n.h2,{id:"side-effects-effect",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#side-effects-effect",children:"#"}),"Side Effects (effect)"]}),"\n",(0,i.jsxs)(n.h3,{id:"side-effects-configuration",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#side-effects-configuration",children:"#"}),"Side Effects Configuration"]}),"\n",(0,i.jsx)(n.p,{children:"The following example shows:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"How to configure the effect of a normal field"}),"\n",(0,i.jsx)(n.li,{children:"How to configure the effect of an array field on the following events"}),"\n",(0,i.jsx)(n.li,{children:"onValueChange"}),"\n",(0,i.jsx)(n.li,{children:"onValueInit"}),"\n",(0,i.jsx)(n.li,{children:"onArrayAppend"}),"\n",(0,i.jsx)(n.li,{children:"onArrayDelete"}),"\n"]}),"\n",(0,i.jsx)("div",{className:"rs-center",children:(0,i.jsx)("img",{src:l,style:{maxWidth:600}})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"import * as React from 'react';\n\nimport {\n  ArrayAppendEffect,\n  ArrayDeleteEffect,\n  createEffectOptions,\n  DataEvent,\n  Effect,\n  Field,\n  FieldArray,\n  FieldArrayRenderProps,\n  FieldRenderProps,\n  FormMeta,\n  FormRenderProps,\n  ValidateTrigger,\n} from '@flowgram.ai/fixed-layout-editor';\nimport Label from '@douyinfe/semi-ui/lib/es/form/label';\nimport { Button, Input } from '@douyinfe/semi-ui';\n\nimport { Feedback } from '../components/feedback';\n\ninterface FormData {\n  a: string;\n  arr: string[];\n}\n\nexport const renderEffectExample = ({ form }: FormRenderProps<FormData>) => (\n  <>\n    <Label> a </Label>\n    <Field name=\"a\">\n      {({ field: { value, onChange }, fieldState }: FieldRenderProps<string>) => (\n        <>\n          <Input value={value} onChange={onChange} />\n          <Feedback errors={fieldState?.errors} />\n        </>\n      )}\n    </Field>\n    <Label> My array </Label>\n    <FieldArray name=\"arr\">\n      {({ field }: FieldArrayRenderProps<string>) => (\n        <>\n          {field.map((child, index) => (\n            <div key={child.key} className=\"array-item-wrapper\">\n              <Field name={child.name}>\n                {({ field: childField, fieldState: childState }: FieldRenderProps<string>) => (\n                  <div>\n                    <Input {...childField} /> <Feedback errors={childState?.errors} />\n                  </div>\n                )}\n              </Field>\n              <Button style={{ marginLeft: 8 }} onClick={() => field.delete(index)}>\n                del\n              </Button>\n            </div>\n          ))}\n          <div>\n            <Button\n              style={{ marginTop: 8, width: 200 }}\n              onClick={() => field.append('default value')}\n            >\n              Add\n            </Button>\n          </div>\n        </>\n      )}\n    </FieldArray>\n  </>\n);\n\nexport const EFFECT_V2: FormMeta = {\n  render: renderEffectExample,\n  // The effect configuration is a map of the form item path to the effect configuration\n  effect: {\n    a: [\n      createEffectOptions<Effect>(DataEvent.onValueChange, ({ value, prevValue }) => {\n        console.log(`a changed: current: ${value} prev:${prevValue}`);\n      }),\n    ],\n    arr: [\n      createEffectOptions<ArrayAppendEffect>(DataEvent.onArrayAppend, ({ value, index }) => {\n        console.log(`arr appended: value=${value}, index=${index}`);\n      }),\n      createEffectOptions<ArrayDeleteEffect>(DataEvent.onArrayDelete, ({ index }) => {\n        console.log(`arr deleted: index=${index}`);\n      }),\n    ],\n    ['arr.*']: [\n      createEffectOptions<Effect>(DataEvent.onValueChange, ({ value, prevValue }) => {\n        console.log(`arr item value changed: current: ${value} prev:${prevValue}`);\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"side-effects-event",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#side-effects-event",children:"#"}),"Side Effects Event"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",meta:"pure",children:"export enum DataEvent {\n  /* Triggered when the value is different from the initial value or the previous value */\n  onValueChange = 'onValueChange',\n  /**\n   * Triggered when the initial value is set, the triggering scenarios are:\n   * - The form is configured with defaultValue, and the form is initialized\n   * - A form item is configured with defaultValue, and the form item is initialized without a value\n   */\n  onValueInit = 'onValueInit',\n  /**\n   * Triggered when the initial value is set, the triggering scenarios are:\n   * - The form is configured with defaultValue, and the form is initialized\n   * - A form item is configured with defaultValue, and the form item is initialized without a value\n   */\n  onValueInitOrChange = 'onValueInitOrChange',\n  /* Not recommended, this event depends on FieldArray rendering, and the value event may not be triggered in the case of non-rendering */\n  onArrayAppend = 'onArrayAppend',\n  /* Not recommended, this event depends on FieldArray rendering, and the value event may not be triggered in the case of non-rendering */\n  onArrayDelete = 'onArrayDelete',\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"api",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api",children:"#"}),"API"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",meta:"pure",children:"// The effect of onValueChange and onValueInit follows this interface\nexport type Effect<TFieldValue = any, TFormValues = any> = (props: {\n  value?: TFieldValue;\n  prevValue?: TFieldValue;\n  formValues?: TFormValues;\n  context?: NodeContext;\n}) => void;\n\nexport type ArrayAppendEffect<TFieldValue = any, TFormValues = any> = (props: {\n  index?: number;\n  value?: TFieldValue;\n  arrayValues?: Array<TFieldValue>;\n  formValues?: TFormValues;\n  context?: NodeContext;\n}) => void;\n\nexport type ArrayDeleteEffect<TFieldValue = any, TFormValues = any> = (props: {\n  index: number;\n  arrayValue?: Array<TFieldValue>;\n  formValues?: TFormValues;\n  context?: NodeContext;\n}) => void;\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"dynamic-dependencies",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dynamic-dependencies",children:"#"}),"Dynamic Dependencies"]}),"\n",(0,i.jsx)(n.p,{children:"Declare dependencies through deps"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"import * as React from 'react';\n\nimport {\n  Field,\n  FieldRenderProps,\n  FormMeta,\n  FormRenderProps,\n} from '@flowgram.ai/fixed-layout-editor';\nimport Label from '@douyinfe/semi-ui/lib/es/form/label';\nimport { Input, Switch } from '@douyinfe/semi-ui';\n\ninterface FormData {\n  isBatch: boolean;\n  batch: string;\n}\n\nexport const renderDynamicExample = ({ form }: FormRenderProps<FormData>) => (\n  <>\n    <div>\n      <Label> is Batch ? </Label>\n      <Field name=\"isBatch\">\n        {({ field: { value, onChange } }: FieldRenderProps<boolean>) => (\n          <>\n            <Switch checked={value} onChange={onChange} size={'small'} />\n          </>\n        )}\n      </Field>\n    </div>\n    <Field\n      name=\"batch\"\n      render={({ field }: FieldRenderProps<string>) =>\n        form.values?.isBatch ? (\n          <>\n            <Label> batch </Label>\n            <Input {...field} />\n          </>\n        ) : (\n          <></>\n        )\n      }\n      // Configure the dependencies of the form item through deps\n      deps={['isBatch']}\n    />\n  </>\n);\n\nexport const DYNAMIC_V2: FormMeta = {\n  render: renderDynamicExample,\n};\n"})})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(o,e)})):o(e)}let c=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["en%2Fguide%2Fadvanced%2Fform.mdx"]={toc:[{id:"config",text:"Config",depth:2},{id:"enable-node-engine",text:"Enable Node Engine",depth:3},{id:"node-configuration-formmeta",text:"Node Configuration formMeta",depth:3},{id:"add-form-to-node-rendering",text:"Add form to node rendering",depth:3},{id:"field",text:"Field",depth:2},{id:"filedarray",text:"FiledArray",depth:2},{id:"validation",text:"Validation",depth:2},{id:"validation-configuration",text:"Validation Configuration",depth:3},{id:"validation-timing",text:"Validation Timing",depth:3},{id:"path-fuzzy-matching",text:"Path Fuzzy Matching",depth:3},{id:"side-effects-effect",text:"Side Effects (effect)",depth:2},{id:"side-effects-configuration",text:"Side Effects Configuration",depth:3},{id:"side-effects-event",text:"Side Effects Event",depth:3},{id:"api",text:"API",depth:3},{id:"dynamic-dependencies",text:"Dynamic Dependencies",depth:2}],title:"Form",frontmatter:{}}}}]);