"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["674449"],{704425:function(e,n,o){o.r(n),o.d(n,{default:function(){return c}});var t=o(110239),a=o(444827);function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",pre:"pre",code:"code"},(0,a.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"common-apis",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#common-apis",children:"#"}),"Common APIs"]}),"\n",(0,t.jsxs)(n.h2,{id:"flowdocument-automated-layout-document-data",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#flowdocument-automated-layout-document-data",children:"#"}),"FlowDocument (Automated Layout Document Data)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:"",children:"// Can be obtained through hook or ctx\nconst doc = useService<FlowDocument>(FlowDocument)\n\ndoc.fromJSON(data) // Load data\ndoc.getAllNodes() // Get all nodes\ndoc.traverseDFS(node => {}) // Depth-first traversal of nodes\ndoc.toJSON() // TODO This is the old version data, not yet optimized. Business logic should implement JSON conversion using traverseDFS\n\ndoc.addFromNode(targetNode, json) // Insert after the specified node\n\ndoc.onNodeCreate(({ node, data}) => {}) // Listen to node creation, data is the JSON data at creation time\ndoc.onNodeDispose(({ node }) => {}) // Listen to node deletion\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"workflowdocument-free-connection-layout-document-data-inherits-from-flowdocument",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#workflowdocument-free-connection-layout-document-data-inherits-from-flowdocument",children:"#"}),"WorkflowDocument (Free Connection Layout Document Data) Inherits from FlowDocument"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:"",children:"const doc = useService<WorkflowDocument>(WorkflowDocument)\n\ndoc.fromJSON(data) // Load data\ndoc.toJSON() // Export data\ndoc.getAllNodes() // Get all nodes\ndoc.linesManager.getAllLines() // Get all lines\n\n// Create node\ndoc.createWorkflowNode({ id: nanoid(), type: 'xxx', data: {}, meta: { position: { x: 0, y: 0 } } })\n// Create line, from and to are the node IDs to connect, fromPort and toPort can be omitted for single ports\ndoc.linesManager.createLine({ from, to, fromPort, toPort })\n\n// Listen to changes, this will monitor events for lines and nodes\ndoc.onContentChange((e) => {\n\n})\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"flownodeentity-node",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#flownodeentity-node",children:"#"}),"FlowNodeEntity (Node)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:"",children:"node.flowNodeType // Current node type\nnode.transform.bounds // Get node's bounding rectangle, includes x,y,width,height\nnode.updateExtInfo({ title: 'xxx' }) // Set extension data, reactive will refresh node\nnode.getExtInfo<T>() // Get extension data\nnode.getNodeRegister() // Get current node definition\n\nnode.dispose() // Delete node\n\n// renderData is node UI-related data\nconst renderData = node.renderData\nrenderData.node // Current node's DOM node\nrenderData.expanded // Whether current node is expanded, can be set\n\n// Get all upstream input and output nodes (free connection layout)\nnode.getData<WorkflowNodeLinesData>(WorkflowNodeLinesData).allInputNodes\nnode.getData<WorkflowNodeLinesData>(WorkflowNodeLinesData).allOutputNodes\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"playground-canvas",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#playground-canvas",children:"#"}),"Playground (Canvas)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:"",children:"// Can be obtained through hook or ctx\nconst playground = useService(Playground)\n\n// Scroll to specified node and center it\nctx.playground.config.scrollToView({\n   entities: [node]\n   scrollToCenter: true\n   easing: true // Easing animation\n})\n\n// Scroll canvas\nctx.playground.config.scroll({\n  scrollX: 0\n  scrollY: 0\n})\n\n// Fit to screen\nctx.playground.config.fitView(\n  doc.root.getData<FlowNodeTransformData>().bounds, // Rectangle to center, here using root node size to represent maximum frame\n  true, // Whether to use easing\n  20, // padding, leave blank spacing\n)\n\n// Zoom\nctx.playground.config.zoomin()\nctx.playground.config.zoomout()\nctx.playground.config.finalScale // Current zoom scale\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"selectionservice-selector",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#selectionservice-selector",children:"#"}),"SelectionService (Selector)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:"",children:"const selectionService = useService<SelectionService>()\n\nselection.selection // Returns currently selected node array, can also be modified, e.g., select node: selection.selection = [node]\n\nselection.onSelectionChanged(() => {}) // Listen to changes\n"})})]})}function r(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(d,e)})):d(e)}let c=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["en%2Fapi%2Fcommon-apis.mdx"]={toc:[{id:"flowdocument-automated-layout-document-data",text:"FlowDocument (Automated Layout Document Data)",depth:2},{id:"workflowdocument-free-connection-layout-document-data-inherits-from-flowdocument",text:"WorkflowDocument (Free Connection Layout Document Data) Inherits from FlowDocument",depth:2},{id:"flownodeentity-node",text:"FlowNodeEntity (Node)",depth:2},{id:"playground-canvas",text:"Playground (Canvas)",depth:2},{id:"selectionservice-selector",text:"SelectionService (Selector)",depth:2}],title:"Common APIs",frontmatter:{}}}}]);