"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["852858"],{159028:function(e,n,r){e.exports=r.p+"static/image/field-array.cade6f8d.gif"},201971:function(e,n,r){e.exports=r.p+"static/image/form-effect.1fbd8b32.gif"},499289:function(e,n,r){e.exports=r.p+"static/image/form-validate.b37371e5.gif"},95495:function(e,n,r){r.r(n),r.d(n,{default:function(){return c}});var a=r(110239),d=r(444827),i=r(159028),l=r(499289),t=r(201971);function s(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",p:"p",pre:"pre",code:"code",div:"div",ul:"ul",li:"li",ol:"ol"},(0,d.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"表单的使用",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#表单的使用",children:"#"}),"表单的使用"]}),"\n",(0,a.jsxs)(n.h2,{id:"配置",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置",children:"#"}),"配置"]}),"\n",(0,a.jsxs)(n.h3,{id:"开启节点引擎",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#开启节点引擎",children:"#"}),"开启节点引擎"]}),"\n",(0,a.jsx)(n.p,{children:"需要开启节点引擎才能使用"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",meta:'pure title="use-editor-props.ts"',children:"\n// EditorProps\n{\n  nodeEngine: {\n    /**\n     * 需要开启节点引擎才能使用\n     */\n    enable: true\n    /**\n     * 节点内部报错的渲染组件\n     */\n    nodeErrorRender?: NodeErrorRender;\n    /**\n     * 节点无内容时的渲染组件\n     */\n    nodePlaceholderRender?: NodePlaceholderRender;\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"节点配置-formmeta",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#节点配置-formmeta",children:"#"}),"节点配置 formMeta"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",meta:'pure title="node-registries.ts"',children:"import { FlowNodeRegistry, ValidateTrigger } from '@flowgram.ai/fixed-layout-editor';\n\nexport const nodeRegistries: FlowNodeRegistry[] = [\n  {\n    type: 'start',\n    /**\n     * 配置节点表单的校验及渲染\n     */\n    formMeta: {\n      validateTrigger: ValidateTrigger.onChange,\n      validate: {\n        content: ({ value }) => (value ? undefined : 'Content is required'),\n      },\n      /**\n       * Render form\n       */\n      render: () => (\n       <>\n          <Field<string> name=\"title\">\n            {({ field }) => <div className=\"demo-free-node-title\">{field.value}</div>}\n          </Field>\n          <Field<string> name=\"content\">\n            {({ field, fieldState }) => (\n              <>\n                <input onChange={field.onChange} value={field.value}/>\n                {fieldState?.invalid && <Feedback errors={fieldState?.errors}/>}\n              </>\n            )}\n          </Field>\n        </>\n      )\n    },\n  }\n]\n\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"节点渲染添加表单",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#节点渲染添加表单",children:"#"}),"节点渲染添加表单"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",meta:'pure title="base-node.tsx"',children:'\nexport const BaseNode = () => {\n  /**\n   * 提供节点渲染相关的方法\n   */\n  const { form } = useNodeRender()\n  return (\n    <div className="demo-free-node" className={form?.state.invalid && "error"}>\n      {\n        // 表单渲染通过 formMeta 生成\n        form?.render()\n      }\n    </div>\n  )\n};\n\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"field",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#field",children:"#"}),"Field"]}),"\n",(0,a.jsx)(n.p,{children:"Field 的渲染部分，支持三种写法，如下:"}),"\n",(0,a.jsxs)(n.div,{className:"rspress-directive note",children:[(0,a.jsx)(n.div,{className:"rspress-directive-title",children:"NOTE"}),(0,a.jsxs)(n.div,{className:"rspress-directive-content",children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"renderProps"})," 参数"]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"field"}),"\n",(0,a.jsx)(n.li,{children:"fieldState"}),"\n",(0,a.jsx)(n.li,{children:"formState"}),"\n"]})]})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",meta:"pure",children:'const render = () => (\n  <div>\n    <Label> 1. 通过 children </Label>\n    // 该方式适用于简单场景，Field 会将  value onChange 等属性直接注入第一层children组件中\n    <Field name="c">\n      <Input />\n    </Field>\n    <Label> 2. 通过 Render Props  </Label>\n    // 该方式适用于复杂场景，当 return 的组件存在多层嵌套，用户可以主动将field 中的属性注入希望注入的组件中\n    <Field name="a">\n        {({ field, fieldState, formState }: FieldRenderProps<string>) => <div><Input {...field} /><Feedbacks errors={fieldState.errors}/></div>}\n    </Field>\n\n    <Label> 3. 通过传 render 函数</Label>\n    // 该方式类似方式2，但通过props 传入\n    <Field name="b" render={({ field }: FieldRenderProps<string>) => <Input {...field} />} />\n  </div>\n);\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"filedarray",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#filedarray",children:"#"}),"FiledArray"]}),"\n",(0,a.jsx)(n.p,{children:"以下例子展示："}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"数组的写法"}),"\n",(0,a.jsx)(n.li,{children:"数组项的校验如何配置"}),"\n",(0,a.jsx)(n.li,{children:"数组项错误的展示"}),"\n"]}),"\n",(0,a.jsx)("div",{className:"rs-center",children:(0,a.jsx)("img",{src:i,style:{maxWidth:600}})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"import {\n  Field,\n  FieldArray,\n  FieldArrayRenderProps,\n  FieldRenderProps,\n  FormMeta,\n  FormRenderProps,\n  ValidateTrigger,\n} from '@flowgram.ai/fixed-layout-editor';\nimport Label from '@douyinfe/semi-ui/lib/es/form/label';\nimport { Button, Input } from '@douyinfe/semi-ui';\n\nimport { Feedback } from '../components/feedback';\n\ninterface FormData {\n  arr: string[];\n}\n\nexport const renderNodeWithArray = ({ form }: FormRenderProps<FormData>) => (\n  <>\n    <Label> My array </Label>\n    <FieldArray name=\"arr\">\n      {({ field }: FieldArrayRenderProps<string>) => (\n        <>\n          {field.map((child, index) => (\n            <div key={child.key} className=\"array-item-wrapper\">\n              <Field name={child.name}>\n                {({ field: childField, fieldState: childState }: FieldRenderProps<string>) => (\n                  <div>\n                    <Input {...childField} /> <Feedback errors={childState?.errors} />\n                  </div>\n                )}\n              </Field>\n              <Button style={{ marginLeft: 8 }} onClick={() => field.delete(index)}>\n                del\n              </Button>\n            </div>\n          ))}\n          <div>\n            <Button\n              style={{ marginTop: 8, width: 200 }}\n              onClick={() => field.append('default value')}\n            >\n              Add\n            </Button>\n          </div>\n        </>\n      )}\n    </FieldArray>\n  </>\n);\n\nexport const arrayMeta: FormMeta = {\n  render: renderNodeWithArray,\n  validateTrigger: ValidateTrigger.onChange,\n  // 校验map 中的name 支持模糊匹配\n  validate: {\n    ['arr.*']: () => 'array item error',\n  },\n};\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"校验",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#校验",children:"#"}),"校验"]}),"\n",(0,a.jsxs)(n.h3,{id:"校验配置",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#校验配置",children:"#"}),"校验配置"]}),"\n",(0,a.jsx)(n.p,{children:"校验逻辑配置在全局，通过表单项路径声明校验逻辑"}),"\n",(0,a.jsx)("div",{className:"rs-center",children:(0,a.jsx)("img",{src:l,style:{maxWidth:600}})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"export const renderValidateExample = ({ form }: FormRenderProps<FormData>) => (\n  <>\n    <Label> a (最大长度为 5)</Label>\n    <Field name=\"a\">\n      {({ field: { value, onChange }, fieldState }: FieldRenderProps<string>) => (\n        <>\n          <Input value={value} onChange={onChange} />\n          <Feedback errors={fieldState?.errors} />\n        </>\n      )}\n    </Field>\n    <Label> b (如果a存在，b可以选填) </Label>\n    <Field\n      name=\"b\"\n      render={({ field: { value, onChange }, fieldState }: FieldRenderProps<string>) => (\n        <>\n          <Input value={value} onChange={onChange} />\n          <Feedback errors={fieldState?.errors} />\n        </>\n  )}\n/>\n  </>\n);\n\nexport const VALIDATE_EXAMPLE: FormMeta = {\n  render: renderValidateExample,\n  // 校验时机配置\n  validateTrigger: ValidateTrigger.onChange,\n  validate: {\n    // 单纯校验值\n    a: ({ value }) => (value.length > 5 ? '最大长度为5' : undefined),\n    // 校验依赖其他表单项的值\n    b: ({ value, formValues }) => {\n      if (formValues.a) {\n        return undefined;\n      } else {\n        return value ? 'undefined' : 'a 存在时 b 必填';\n      }\n    },\n    // 校验依赖节点或画布信息\n    c: ({ value, formValues, context }) => {\n      const { node， playgroundContext } = context;\n      // 此处逻辑省略\n    },\n  },\n};\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"校验时机",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#校验时机",children:"#"}),"校验时机"]}),"\n",(0,a.jsxs)("table",{className:"rs-table",children:[(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(n.code,{children:"ValidateTrigger.onChange"})}),(0,a.jsx)("td",{children:"表单数据变更时校验（不包含初始化数据）"})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(n.code,{children:"ValidateTrigger.onBlur"})}),(0,a.jsx)("td",{children:"表单项输入控件onBlur时校验"})]})]}),"\n",(0,a.jsxs)(n.h3,{id:"路径模糊匹配",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#路径模糊匹配",children:"#"}),"路径模糊匹配"]}),"\n",(0,a.jsx)(n.p,{children:"校验配置的路径（即key）支持模糊匹配， 通常用于数组场景，见以下例子"}),"\n",(0,a.jsx)("div",{className:"rs-red",children:(0,a.jsx)(n.p,{children:"注意：* 仅代表下钻一级"})}),"\n",(0,a.jsxs)("table",{className:"rs-table",children:[(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(n.code,{children:"arr.*"})}),(0,a.jsxs)("td",{children:[(0,a.jsx)(n.code,{children:"arr"})," 字段下的所有一级子项"]})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(n.code,{children:"arr.x.*"})}),(0,a.jsxs)("td",{children:[(0,a.jsx)(n.code,{children:"arr.x"})," 下的所有一级子项"]})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(n.code,{children:"arr.*.x"})}),(0,a.jsxs)("td",{children:[(0,a.jsx)(n.code,{children:"arr"})," 下的所有一级子项下的子项 ",(0,a.jsx)(n.code,{children:"x"})]})]})]}),"\n",(0,a.jsxs)(n.h2,{id:"副作用-effect",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#副作用-effect",children:"#"}),"副作用 (effect)"]}),"\n",(0,a.jsxs)(n.h3,{id:"副作用配置",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#副作用配置",children:"#"}),"副作用配置"]}),"\n",(0,a.jsx)(n.p,{children:"以下例子展示："}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"普通字段如何配置effect"}),"\n",(0,a.jsx)(n.li,{children:"数组字段在以下事件如何配置effect"}),"\n",(0,a.jsx)(n.li,{children:"onValueChange"}),"\n",(0,a.jsx)(n.li,{children:"onValueInit"}),"\n",(0,a.jsx)(n.li,{children:"onArrayAppend"}),"\n",(0,a.jsx)(n.li,{children:"onArrayDelete"}),"\n"]}),"\n",(0,a.jsx)("div",{className:"rs-center",children:(0,a.jsx)("img",{src:t,style:{maxWidth:600}})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"import * as React from 'react';\n\nimport {\n  ArrayAppendEffect,\n  ArrayDeleteEffect,\n  createEffectOptions,\n  DataEvent,\n  Effect,\n  Field,\n  FieldArray,\n  FieldArrayRenderProps,\n  FieldRenderProps,\n  FormMeta,\n  FormRenderProps,\n  ValidateTrigger,\n} from '@flowgram.ai/fixed-layout-editor';\nimport Label from '@douyinfe/semi-ui/lib/es/form/label';\nimport { Button, Input } from '@douyinfe/semi-ui';\n\nimport { Feedback } from '../components/feedback';\n\ninterface FormData {\n  a: string;\n  arr: string[];\n}\n\nexport const renderEffectExample = ({ form }: FormRenderProps<FormData>) => (\n  <>\n    <Label> a </Label>\n    <Field name=\"a\">\n      {({ field: { value, onChange }, fieldState }: FieldRenderProps<string>) => (\n        <>\n          <Input value={value} onChange={onChange} />\n          <Feedback errors={fieldState?.errors} />\n        </>\n      )}\n    </Field>\n    <Label> My array </Label>\n    <FieldArray name=\"arr\">\n      {({ field }: FieldArrayRenderProps<string>) => (\n        <>\n          {field.map((child, index) => (\n            <div key={child.key} className=\"array-item-wrapper\">\n              <Field name={child.name}>\n                {({ field: childField, fieldState: childState }: FieldRenderProps<string>) => (\n                  <div>\n                    <Input {...childField} /> <Feedback errors={childState?.errors} />\n                  </div>\n                )}\n              </Field>\n              <Button style={{ marginLeft: 8 }} onClick={() => field.delete(index)}>\n                del\n              </Button>\n            </div>\n          ))}\n          <div>\n            <Button\n              style={{ marginTop: 8, width: 200 }}\n              onClick={() => field.append('default value')}\n            >\n              Add\n            </Button>\n          </div>\n        </>\n      )}\n    </FieldArray>\n  </>\n);\n\nexport const EFFECT_V2: FormMeta = {\n  render: renderEffectExample,\n  // effect 配置是一个key 为表单项路径，value 为effect配置的map\n  effect: {\n    a: [\n      createEffectOptions<Effect>(DataEvent.onValueChange, ({ value, prevValue }) => {\n        console.log(`a changed: current: ${value} prev:${prevValue}`);\n      }),\n    ],\n    arr: [\n      createEffectOptions<ArrayAppendEffect>(DataEvent.onArrayAppend, ({ value, index }) => {\n        console.log(`arr appended: value=${value}, index=${index}`);\n      }),\n      createEffectOptions<ArrayDeleteEffect>(DataEvent.onArrayDelete, ({ index }) => {\n        console.log(`arr deleted: index=${index}`);\n      }),\n    ],\n    ['arr.*']: [\n      createEffectOptions<Effect>(DataEvent.onValueChange, ({ value, prevValue }) => {\n        console.log(`arr item value changed: current: ${value} prev:${prevValue}`);\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"副作用-event",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#副作用-event",children:"#"}),"副作用 Event"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",meta:"pure",children:"export enum DataEvent {\n  /* 当值相较于初始值，或前一个值发生变更时触发 */\n  onValueChange = 'onValueChange',\n  /**\n   * 当初始值设置时触发，触发场景有\n   * - 表单配置了defaultValue, 在表单初始化时会触发\n   * - 某表单项配置了defaultValue, 且该表单项初始化时无值，此时会设置defaultValue 并触发\n   */\n  onValueInit = 'onValueInit',\n  /**\n   * 无论是变更值还是设置初始值都会触发，可以认为是 onValueChange onValueInit 的并集\n   */\n  onValueInitOrChange = 'onValueInitOrChange',\n  /* 不建议使用，该事件依赖FieldArray渲染， 在不渲染情况下可能到值事件不触发 */\n  onArrayAppend = 'onArrayAppend',\n  /* 不建议使用，该事件依赖FieldArray渲染， 在不渲染情况下可能到值事件不触发 */\n  onArrayDelete = 'onArrayDelete',\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"api",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api",children:"#"}),"API"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",meta:"pure",children:"// onValueChange 和 onValueInit 的effect 都遵循该接口\nexport type Effect<TFieldValue = any, TFormValues = any> = (props: {\n  value?: TFieldValue;\n  prevValue?: TFieldValue;\n  formValues?: TFormValues;\n  context?: NodeContext;\n}) => void;\n\nexport type ArrayAppendEffect<TFieldValue = any, TFormValues = any> = (props: {\n  index?: number;\n  value?: TFieldValue;\n  arrayValues?: Array<TFieldValue>;\n  formValues?: TFormValues;\n  context?: NodeContext;\n}) => void;\n\nexport type ArrayDeleteEffect<TFieldValue = any, TFormValues = any> = (props: {\n  index: number;\n  arrayValue?: Array<TFieldValue>;\n  formValues?: TFormValues;\n  context?: NodeContext;\n}) => void;\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"联动",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#联动",children:"#"}),"联动"]}),"\n",(0,a.jsx)(n.p,{children:"通过 deps 声明依赖"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"import * as React from 'react';\n\nimport {\n  Field,\n  FieldRenderProps,\n  FormMeta,\n  FormRenderProps,\n} from '@flowgram.ai/fixed-layout-editor';\nimport Label from '@douyinfe/semi-ui/lib/es/form/label';\nimport { Input, Switch } from '@douyinfe/semi-ui';\n\ninterface FormData {\n  isBatch: boolean;\n  batch: string;\n}\n\nexport const renderDynamicExample = ({ form }: FormRenderProps<FormData>) => (\n  <>\n    <div>\n      <Label> is Batch ? </Label>\n      <Field name=\"isBatch\">\n        {({ field: { value, onChange } }: FieldRenderProps<boolean>) => (\n          <>\n            <Switch checked={value} onChange={onChange} size={'small'} />\n          </>\n        )}\n      </Field>\n    </div>\n    <Field\n      name=\"batch\"\n      render={({ field }: FieldRenderProps<string>) =>\n        form.values?.isBatch ? (\n          <>\n            <Label> batch </Label>\n            <Input {...field} />\n          </>\n        ) : (\n          <></>\n        )\n      }\n      通过 deps 配置，该表单项的渲染依赖哪些其他表单项的值\n      deps={['isBatch']}\n    />\n  </>\n);\n\nexport const DYNAMIC_V2: FormMeta = {\n  render: renderDynamicExample,\n};\n"})})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(s,e)})):s(e)}let c=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["zh%2Fguide%2Fadvanced%2Fform.mdx"]={toc:[{id:"配置",text:"配置",depth:2},{id:"开启节点引擎",text:"开启节点引擎",depth:3},{id:"节点配置-formmeta",text:"节点配置 formMeta",depth:3},{id:"节点渲染添加表单",text:"节点渲染添加表单",depth:3},{id:"field",text:"Field",depth:2},{id:"filedarray",text:"FiledArray",depth:2},{id:"校验",text:"校验",depth:2},{id:"校验配置",text:"校验配置",depth:3},{id:"校验时机",text:"校验时机",depth:3},{id:"路径模糊匹配",text:"路径模糊匹配",depth:3},{id:"副作用-effect",text:"副作用 (effect)",depth:2},{id:"副作用配置",text:"副作用配置",depth:3},{id:"副作用-event",text:"副作用 Event",depth:3},{id:"api",text:"API",depth:3},{id:"联动",text:"联动",depth:2}],title:"表单的使用",frontmatter:{}}}}]);