"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["886512"],{690069:function(e,n,t){t.r(n),t.d(n,{default:function(){return a}});var r=t(110239),i=t(444827);function o(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",ol:"ol",li:"li",pre:"pre",code:"code",ul:"ul",div:"div"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"history",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#history",children:"#"}),"History"]}),"\n",(0,r.jsx)(n.p,{children:"Undo/Redo is a plugin of FlowGram.AI, which is provided in both @flowgram.ai/fixed-layout-editor and @flowgram.ai/free-layout-editor."}),"\n",(0,r.jsxs)(n.h2,{id:"1-quick-start",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-quick-start",children:"#"}),"1. Quick Start"]}),"\n",(0,r.jsxs)(n.h3,{id:"11-enable-history",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-enable-history",children:"#"}),"1.1. Enable history"]}),"\n",(0,r.jsx)(n.p,{children:"Before using the Undo/Redo feature, you need to introduce the editor, using the fixed layout editor as an example."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Add dependencies in package.json"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:'pure title="use-editor-props.tsx"',children:"export function useEditorProps() {\n  return useMemo(\n    () => ({\n      history: {\n        enable: true,\n        enableChangeNode: true // Listen Node engine data change\n      }\n    })\n  )\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"After enabling, you will get the following capabilities:"}),"\n",(0,r.jsxs)("table",{className:"rs-table",children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Introduction"}),(0,r.jsx)("td",{children:"Description"}),(0,r.jsx)("td",{children:"Free Layout"}),(0,r.jsx)("td",{children:"Fixed Layout"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{rowSpan:2,children:"Undo/Redo Shortcut"}),(0,r.jsx)("td",{children:"Use Cmd/Ctrl + Z to trigger Undo"}),(0,r.jsx)("td",{children:"✅"}),(0,r.jsx)("td",{children:"✅"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Use Cmd/Ctrl + Shift + Z to trigger Redo"}),(0,r.jsx)("td",{children:"✅"}),(0,r.jsx)("td",{children:"✅"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{rowSpan:7,children:"Canvas node operation supports undo/redo"}),(0,r.jsx)("td",{children:"Add/Delete node"}),(0,r.jsx)("td",{children:"✅"}),(0,r.jsx)("td",{children:"✅"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Add/Delete line"}),(0,r.jsx)("td",{children:"✅"}),(0,r.jsx)("td",{children:"❌"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Move node"}),(0,r.jsx)("td",{children:"✅"}),(0,r.jsx)("td",{children:"✅"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Add/Delete branch"}),(0,r.jsx)("td",{children:"❌"}),(0,r.jsx)("td",{children:"✅"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Move branch"}),(0,r.jsx)("td",{children:"❌"}),(0,r.jsx)("td",{children:"✅"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Add group"}),(0,r.jsx)("td",{children:"❌"}),(0,r.jsx)("td",{children:"✅"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Cancel group"}),(0,r.jsx)("td",{children:"❌"}),(0,r.jsx)("td",{children:"✅"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{rowSpan:2,children:"Canvas batch operation"}),(0,r.jsx)("td",{children:"Delete node"}),(0,r.jsx)("td",{children:"✅"}),(0,r.jsx)("td",{children:"✅"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Move node"}),(0,r.jsx)("td",{children:"✅"}),(0,r.jsx)("td",{children:"✅"})]})]}),"\n",(0,r.jsxs)(n.h3,{id:"12-disable-history",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12-disable-history",children:"#"}),"1.2. Disable history"]}),"\n",(0,r.jsx)(n.p,{children:"If some data changes triggered by the system do not want to be monitored by undo/redo, you can actively stop the history service and restart it after the data operation is completed"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"const { history } = useClientContext();\nhistory.stop()\n// Do some operations that do not want to be captured, these changes will not be recorded in the operation stack\n...\nhistory.start()\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"13-undoredo-call",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#13-undoredo-call",children:"#"}),"1.3. Undo/Redo Call"]}),"\n",(0,r.jsx)(n.p,{children:"Undo/Redo is generally provided with two button entries on the interface, clicking which can trigger Undo and Redo, and the buttons themselves need to have the status of whether Undo/Redo is possible."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"export function useUndoRedo(): UndoRedo {\n  const { history } = useClientContext();\n  const [canUndo, setCanUndo] = useState(false);\n  const [canRedo, setCanRedo] = useState(false);\n\n  useEffect(() => {\n    const toDispose = history.undoRedoService.onChange(() => {\n      setCanUndo(history.canUndo());\n      setCanRedo(history.canRedo());\n    });\n    return () => {\n      toDispose.dispose();\n    };\n  }, []);\n\n  return {\n    canUndo,\n    canRedo,\n    undo: () => history.undo(),\n    redo: () => history.redo(),\n  };\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"2-extension-function",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-extension-function",children:"#"}),"2. Extension Function"]}),"\n",(0,r.jsxs)(n.h3,{id:"21-operation-registration",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-operation-registration",children:"#"}),"2.1. Operation Registration"]}),"\n",(0,r.jsx)(n.p,{children:"Operations are registered through operationMetas"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:'pure title="use-editor-props.tsx"',children:"...\nhistory={{\n  enable: true,\n  operationMetas: [\n    {\n        type: 'addNode',\n        apply: () => { console.log('addNode')},\n        inverse: (op) => ({ type: 'deleteNode', value: op.value })\n    }\n  ]\n}}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"OperationMeta"})," Core Definition:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"})," is the unique identifier of the operation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inverse"})," is a function, which returns the inverse operation of the current operation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"apply"})," is the logic executed when the operation is triggered"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"export interface OperationMeta {\n  /**\n   * Operation type, needs to be unique\n   */\n  type: string;\n  /**\n   * Convert an operation to another inverse operation, such as insert to delete\n   * @param op Operation\n   * @returns Inverse operation\n   */\n  inverse: (op: Operation) => Operation;\n  /**\n   * Execute operation\n   * @param operation Operation\n   */\n  apply(operation: Operation, source: any): void | Promise<void>;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Suppose I want to add a function to support Undo/Redo for adding and deleting nodes, I need to add two operations"}),"\n",(0,r.jsxs)("div",{style:{marginTop:16,display:"flex",gap:8},children:[(0,r.jsx)("div",{children:(0,r.jsx)("div",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"{\n  type: 'addNode',\n  inverse: op => ({ ...op, type: 'deleteNode' }),\n  apply(op, ctx) {\n    document = ctx.get(Document)\n    document.addNode(op.value)\n  },\n}\n"})})})}),(0,r.jsx)("div",{children:(0,r.jsx)("div",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"{\n  type: 'deleteNode',\n  inverse: op => ({ ...op, type: 'addNode' }),\n  apply(op, ctx) {\n    document = ctx.get(Document)\n    document.deleteNode(op.value.id)\n  },\n}\n"})})})})]}),"\n",(0,r.jsxs)(n.h3,{id:"22-operation-merge",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-operation-merge",children:"#"}),"2.2. Operation Merge"]}),"\n",(0,r.jsx)(n.p,{children:"operationMeta supports shouldMerge to customize the merge strategy, if frequent operations can be merged"}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive warning",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"shouldMerge returns"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Return false means not merged"}),"\n",(0,r.jsx)(n.li,{children:"Return true means merged into one operation stack element"}),"\n",(0,r.jsx)(n.li,{children:"Return Operation means merged into one operation"}),"\n"]})})]}),"\n",(0,r.jsx)(n.p,{children:"The following example is a merge of operations that edit the same field within 500ms"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"{\n  type: 'changeData',\n  inverse: op => ({ ...op, type: 'changeData' }),\n  apply(op, ctx) {},\n  shouldMerge: (op, prev, element) => {\n    // Merge operations within 500ms\n    if (Date.now() - element.getTimestamp() < 500) {\n      if (\n        op.type === prev.type && // Same type\n        op.value.id === prev.value.id && // Same node\n        op.value?.path === prev.value?.path // Same path\n      ) {\n        return {\n          type: op.type,\n          value: {\n            ...op.value,\n            value: op.value.value,\n            oldValue: prev.value.oldValue,\n          },\n        };\n      }\n    }\n    return false;\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"23-operation-execution",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23-operation-execution",children:"#"}),"2.3. Operation Execution"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Single operation execution"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Trigger through pushOperation, the following example uses the operation defined in the business"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"function handleAddNode () {\n   const { history } = useClientContext()\n   history.pushOperation({\n       type: 'addNode',\n       value: {\n          name: 'xx'\n          id: 'xxx'\n       }\n   })\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Batch execution\nAll operations executed in the function called by transact will be merged into one stack element, and will be executed together when undo/redo\nThe following is an example of implementing a batch delete:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"function deleteNodes(nodes: FlowNodeEntity[]) {\n  const { history } = useClientContext()\n  history.transact(() => {\n    nodes.forEach(node => {\n      history.pushOperation({\n        type: OperationType.deleteNode,\n        value: {\n          fromId: fromNode.id,\n          data: node.data,\n        },\n      });\n    });\n  });\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"24-undoredo",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#24-undoredo",children:"#"}),"2.4. Undo/Redo"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Undo/Redo\nUndo execution history.undo method\nRedo execution history.redo method"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"function undo() {\n    const { history } = useClientContext();\n    history.undo();\n}\n\nfunction redo() {\n    const { history } = useClientContext();\n    history.redo();\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Listen Undo/Redo\nListen to the onChange event of undoRedoService.onChange\nThe following is an example of triggering the uri of the corresponding operation after undo/redo (selecting the corresponding node or form item)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"function listenHistoryChange() {\n  const { history } = useClientContext();\n  history.undoRedoService.onChange(\n    ({ type, element }) => {\n      if (type === UndoRedoChangeType.PUSH) {\n        return;\n      }\n      const op = element.getLastOperation();\n      if (!op) {\n        return;\n      }\n      if (op.uri) {\n        // goto somewhere\n      }\n    },\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"25-operation-history",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#25-operation-history",children:"#"}),"2.5. Operation History"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"View refresh\nYou can get the history record through HistoryStack.items, and refresh the interface by listening to HistoryStack.onChange"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"import React from 'react';\n\nexport function HistoryList() {\n  const { historyStack } = useService<HistoryManager>(HistoryManager)\n  const { refresh } = useRefresh()\n  let items = historyManager.historyStack.items;\n\n  useEffect(() => {\n      const disposable = historyStack.onChange(() => {\n          refresh()\n      ])\n\n      return () => {\n          disposable.dispose()\n      }\n  }, [])\n\n  return (\n      <ul>\n        {items.map((item, index) => (\n          <li key={index}>\n            <div>\n              {item.type}({item.id}):\n              {item.operations.map((o, index) => (\n                <Tooltip\n                  key={index}\n                  title={(o.description || '') + `----uri: ${o.uri?.displayName}`}\n                >\n                  {o.label || o.type}\n                </Tooltip>\n              ))}\n            </div>\n\n          </li>\n        ))}\n      </ul>\n  );\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Persistence\nPersistence is implemented through the history-storage plugin"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"databaseName: database name"}),"\n",(0,r.jsx)(n.li,{children:"resourceStorageLimit: resource storage limit number"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"After introducing the @flowgram.ai/history-storage package, the plugin can be used"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"import { createHistoryStoragePlugin } from '@flowgram.ai/history-storage';\n\ncreateHistoryStoragePlugin({\n    databaseName: 'your-history',\n    resourceStorageLimit: 50,\n}),\n"})}),"\n",(0,r.jsx)(n.p,{children:"Query the database list through useStorageHistoryItems"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"import {\n  useStorageHistoryItems,\n} from '@flowgram.ai/history-storage';\n\nexport const HistoryList = () => {\n  const { uri } = useCurrentWidget();\n\n  const { items } = useStorageHistoryItems(\n    storage,\n    uri.withoutQuery().toString(),\n  );\n\n  return <>\n    { JSON.stringify(items) }\n  </>\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"3-api-list",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-api-list",children:"#"}),"3. API List"]}),"\n",(0,r.jsxs)(n.h3,{id:"31operationmeta",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31operationmeta",children:"#"}),"3.1.",(0,r.jsx)(n.a,{href:"https://flowgram-ai.github.io/flowgram.ai/auto-docs/fixed-history-plugin/interfaces/OperationMeta.html",rel:"noopener noreferrer",target:"_blank",children:"OperationMeta"})]}),"\n",(0,r.jsx)(n.p,{children:"OperationMeta, used to define an operation"}),"\n",(0,r.jsxs)(n.h3,{id:"32operation",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32operation",children:"#"}),"3.2.",(0,r.jsx)(n.a,{href:"https://flowgram-ai.github.io/flowgram.ai/auto-docs/fixed-history-plugin/interfaces/Operation.html",rel:"noopener noreferrer",target:"_blank",children:"Operation"})]}),"\n",(0,r.jsx)(n.p,{children:"Operation data, associated with OperationMeta through type"}),"\n",(0,r.jsxs)(n.h3,{id:"33operationservice",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33operationservice",children:"#"}),"3.3.",(0,r.jsx)(n.a,{href:"https://flowgram-ai.github.io/flowgram.ai/auto-docs/fixed-history-plugin/classes/OperationService.html",rel:"noopener noreferrer",target:"_blank",children:"OperationService"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://flowgram-ai.github.io/flowgram.ai/auto-docs/fixed-history-plugin/classes/OperationService.html#onapply",rel:"noopener noreferrer",target:"_blank",children:"onApply"}),"\nUse onApply to listen to a triggered operation"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"useService(OperationService).onApply((op: Operation) => {\n    console.log(op)\n    // Here you can execute your own business logic according to type\n})\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"34historyservice",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#34historyservice",children:"#"}),"3.4.",(0,r.jsx)(n.a,{href:"https://flowgram-ai.github.io/flowgram.ai/auto-docs/fixed-history-plugin/classes/HistoryService.html",rel:"noopener noreferrer",target:"_blank",children:"HistoryService"})]}),"\n",(0,r.jsx)(n.p,{children:"The core API of the History module exposed Service"}),"\n",(0,r.jsxs)(n.h3,{id:"35undoredoservice",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#35undoredoservice",children:"#"}),"3.5.",(0,r.jsx)(n.a,{href:"https://flowgram-ai.github.io/flowgram.ai/auto-docs/fixed-history-plugin/classes/UndoRedoService.html",rel:"noopener noreferrer",target:"_blank",children:"UndoRedoService"})]}),"\n",(0,r.jsx)(n.p,{children:"The service that manages the UndoRedo stack"}),"\n",(0,r.jsxs)(n.h3,{id:"36historystack",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#36historystack",children:"#"}),"3.6.",(0,r.jsx)(n.a,{href:"https://flowgram-ai.github.io/flowgram.ai/auto-docs/fixed-history-plugin/classes/HistoryStack.html",rel:"noopener noreferrer",target:"_blank",children:"HistoryStack"})]}),"\n",(0,r.jsx)(n.p,{children:"History stack, listen to all push undo redo operations, and record them in the stack"}),"\n",(0,r.jsxs)(n.h3,{id:"37historydatabase",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#37historydatabase",children:"#"}),"3.7.",(0,r.jsx)(n.a,{href:"https://flowgram-ai.github.io/flowgram.ai/auto-docs/history-storage/classes/HistoryDatabase.html",rel:"noopener noreferrer",target:"_blank",children:"HistoryDatabase"})]}),"\n",(0,r.jsx)(n.p,{children:"Persistence database operations"})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(o,e)})):o(e)}let a=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["en%2Fguide%2Fadvanced%2Fhistory.mdx"]={toc:[{id:"1-quick-start",text:"1. Quick Start",depth:2},{id:"11-enable-history",text:"1.1. Enable history",depth:3},{id:"12-disable-history",text:"1.2. Disable history",depth:3},{id:"13-undoredo-call",text:"1.3. Undo/Redo Call",depth:3},{id:"2-extension-function",text:"2. Extension Function",depth:2},{id:"21-operation-registration",text:"2.1. Operation Registration",depth:3},{id:"22-operation-merge",text:"2.2. Operation Merge",depth:3},{id:"23-operation-execution",text:"2.3. Operation Execution",depth:3},{id:"24-undoredo",text:"2.4. Undo/Redo",depth:3},{id:"25-operation-history",text:"2.5. Operation History",depth:3},{id:"3-api-list",text:"3. API List",depth:2},{id:"31operationmeta",text:"3.1.OperationMeta",depth:3},{id:"32operation",text:"3.2.Operation",depth:3},{id:"33operationservice",text:"3.3.OperationService",depth:3},{id:"34historyservice",text:"3.4.HistoryService",depth:3},{id:"35undoredoservice",text:"3.5.UndoRedoService",depth:3},{id:"36historystack",text:"3.6.HistoryStack",depth:3},{id:"37historydatabase",text:"3.7.HistoryDatabase",depth:3}],title:"History",frontmatter:{}}}}]);