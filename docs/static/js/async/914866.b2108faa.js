"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["914866"],{14643:function(e,r,n){n.r(r),n.d(r,{default:function(){return s}});var o=n(110239),d=n(444827);function a(e){let r=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code"},(0,d.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(r.h1,{id:"workflownoderendererfree",children:[(0,o.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#workflownoderendererfree",children:"#"}),"WorkflowNodeRenderer(free)"]}),"\n",(0,o.jsx)(r.p,{children:"Free layout node container"}),"\n",(0,o.jsxs)(r.h2,{id:"usage",children:[(0,o.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#usage",children:"#"}),"Usage"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",meta:"pure",children:"import { useNodeRender, WorkflowNodeRenderer } from '@flowgram.ai/free-layout-editor';\n\nexport const BaseNode = () => {\n  /**\n   * Provide methods related to node rendering\n   */\n  const { form } = useNodeRender()\n  /**\n   * WorkflowNodeRenderer will add node drag events and port rendering, if you want to deeply customize it, you can refer to the source code of the component:\n   * https://github.com/flowgram-ai/flowgram.ai/blob/main/packages/client/free-layout-editor/src/components/workflow-node-renderer.tsx\n   */\n  return (\n    <WorkflowNodeRenderer className=\"demo-free-node\" node={props.node}>\n      {\n        // Form rendering through formMeta generation\n        form?.render()\n      }\n    </WorkflowNodeRenderer>\n  )\n};\n"})})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,d.ah)(),e.components);return r?(0,o.jsx)(r,Object.assign({},e,{children:(0,o.jsx)(a,e)})):a(e)}let s=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["en%2Fapi%2Fcomponents%2Fworkflow-node-renderer.mdx"]={toc:[{id:"usage",text:"Usage",depth:2}],title:"WorkflowNodeRenderer(free)",frontmatter:{}}}}]);