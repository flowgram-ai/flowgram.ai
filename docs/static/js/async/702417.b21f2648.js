"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["702417"],{104098:function(e,n,t){t.r(n),t.d(n,{default:function(){return a}});var r=t(110239),o=t(444827),i=t(156973);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h3:"h3",ul:"ul",li:"li",pre:"pre",div:"div"},(0,o.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"创建自由布局画布",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建自由布局画布",children:"#"}),"创建自由布局画布"]}),"\n",(0,r.jsxs)(n.p,{children:["本案例可通过 ",(0,r.jsx)(n.code,{children:"npx @flowgram.ai/create-app@latest free-layout-simple"})," 安装，完整代码及效果见："]}),"\n",(0,r.jsx)("div",{className:"rs-tip",children:(0,r.jsx)("a",{className:"rs-link",href:"/flowgram.ai/examples/free-layout/free-layout-simple.html",children:(0,r.jsx)(n.p,{children:"自由布局基础用法"})})}),"\n",(0,r.jsxs)(n.h3,{id:"1-画布入口",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-画布入口",children:"#"}),"1. 画布入口"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FreeLayoutEditorProvider"}),": 画布配置器, 内部会生成 react-context 供子组件消费"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"EditorRenderer"}),": 为最终渲染的画布，可以包装在其他组件下边方便定制画布位置"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:'pure title="app.tsx"',children:"\nimport {\n  FreeLayoutEditorProvider,\n  EditorRenderer,\n} from '@flowgram.ai/free-layout-editor';\n\nimport { useEditorProps } from './use-editor-props' // 画布详细的 props 配置\nimport { Tools } from './tools' // 画布工具\n\nfunction App() {\n  const editorProps = useEditorProps()\n  return (\n    <FixedLayoutEditorProvider {...editorProps}>\n      <EditorRenderer className=\"demo-editor\" />\n      <Tools />\n    </FixedLayoutEditorProvider>\n  );\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-配置画布",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-配置画布",children:"#"}),"2. 配置画布"]}),"\n",(0,r.jsx)(n.p,{children:"画布配置采用声明式，提供 数据、渲染、事件、插件相关配置"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:'pure title="use-editor-props.tsx"',children:"import { useMemo } from 'react';\nimport { type FixedLayoutProps } from '@flowgram.ai/free-layout-editor';\nimport { createMinimapPlugin } from '@flowgram.ai/minimap-plugin';\n\nimport { intialData } from './initial-data' // 初始化数据\nimport { nodeRegistries } from './node-registries' // 节点声明配置\nimport { BaseNode } from './base-node' // 节点渲染\n\nexport function useEditorProps(\n): FixedLayoutProps {\n  return useMemo<FixedLayoutProps>(\n    () => ({\n      /**\n       * 初始化数据\n       */\n      initialData,\n      /**\n       * 画布节点定义\n       */\n      nodeRegistries,\n      /**\n       * 物料\n       */\n      materials: {\n        renderDefaultNode: BaseNode, // 节点渲染组件\n      },\n      /**\n       * 节点引擎, 用于渲染节点表单\n       */\n      nodeEngine: {\n        enable: true,\n      },\n      /**\n       * 画布历史记录, 用于控制 redo/undo\n       */\n      history: {\n        enable: true,\n        enableChangeNode: true, // 用于监听节点表单数据变化\n      },\n      /**\n       * 画布初始化回调\n       */\n      onInit: ctx => {\n        // 如果要动态加载数据，可以通过如下方法异步执行\n        // ctx.docuemnt.fromJSON(initialData)\n      },\n      /**\n       * 画布第一次渲染完整回调\n       */\n      onAllLayersRendered: (ctx) => {},\n      /**\n       * 画布销毁回调\n       */\n      onDispose: () => { },\n      plugins: () => [\n        /**\n         * 缩略图插件\n         */\n        createMinimapPlugin({}),\n      ],\n    }),\n    [],\n  );\n}\n\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-配置数据",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-配置数据",children:"#"}),"3. 配置数据"]}),"\n",(0,r.jsx)(n.p,{children:"画布文档数据采用树形结构，支持嵌套"}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive note",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"文档数据基本结构:"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["nodes ",(0,r.jsx)(n.code,{children:"array"})," 节点列表, 支持嵌套"]}),"\n",(0,r.jsxs)(n.li,{children:["edges ",(0,r.jsx)(n.code,{children:"array"})," 边列表"]}),"\n"]})})]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive note",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"节点数据基本结构:"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["id: ",(0,r.jsx)(n.code,{children:"string"})," 节点唯一标识, 必须保证唯一"]}),"\n",(0,r.jsxs)(n.li,{children:["meta: ",(0,r.jsx)(n.code,{children:"object"})," 节点的 ui 配置信息，如自由布局的 ",(0,r.jsx)(n.code,{children:"position"})," 信息放这里"]}),"\n",(0,r.jsxs)(n.li,{children:["type: ",(0,r.jsx)(n.code,{children:"string | number"})," 节点类型，会和 ",(0,r.jsx)(n.code,{children:"nodeRegistries"})," 中的 ",(0,r.jsx)(n.code,{children:"type"})," 对应"]}),"\n",(0,r.jsxs)(n.li,{children:["data: ",(0,r.jsx)(n.code,{children:"object"})," 节点表单数据, 业务可自定义"]}),"\n",(0,r.jsxs)(n.li,{children:["blocks: ",(0,r.jsx)(n.code,{children:"array"})," 节点的分支, 采用 ",(0,r.jsx)(n.code,{children:"block"})," 更贴近 ",(0,r.jsx)(n.code,{children:"Gramming"})]}),"\n"]})})]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive note",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"边数据基本结构:"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["sourceNodeID: ",(0,r.jsx)(n.code,{children:"string"})," 开始节点 id"]}),"\n",(0,r.jsxs)(n.li,{children:["targetNodeID: ",(0,r.jsx)(n.code,{children:"string"})," 目标节点 id"]}),"\n",(0,r.jsxs)(n.li,{children:["sourcePortID?: ",(0,r.jsx)(n.code,{children:"string | number"})," 开始端口 id, 缺省则采用开始节点的默认端口"]}),"\n",(0,r.jsxs)(n.li,{children:["targetPortID?: ",(0,r.jsx)(n.code,{children:"string | number"})," 目标端口 id, 缺省则采用目标节点的默认端口"]}),"\n"]})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:'pure title="initial-data.tsx"',children:"import { WorkflowJSON } from '@flowgram.ai/free-layout-editor';\n\nexport const initialData: WorkflowJSON = {\n  nodes: [\n    {\n      id: 'start_0',\n      type: 'start',\n      meta: {\n        position: { x: 0, y: 0 },\n      },\n      data: {\n        title: 'Start',\n        content: 'Start content'\n      },\n    },\n    {\n      id: 'node_0',\n      type: 'custom',\n      meta: {\n        position: { x: 400, y: 0 },\n      },\n      data: {\n        title: 'Custom',\n        content: 'Custom node content'\n      },\n    },\n    {\n      id: 'end_0',\n      type: 'end',\n      meta: {\n        position: { x: 800, y: 0 },\n      },\n      data: {\n        title: 'End',\n        content: 'End content'\n      },\n    },\n  ],\n  edges: [\n    {\n      sourceNodeID: 'start_0',\n      targetNodeID: 'node_0',\n    },\n    {\n      sourceNodeID: 'node_0',\n      targetNodeID: 'end_0',\n    },\n  ],\n};\n\n\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"4-声明节点",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-声明节点",children:"#"}),"4. 声明节点"]}),"\n",(0,r.jsx)(n.p,{children:"声明节点可以用于确定节点的类型及渲染方式"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:'pure title="node-registries.tsx"',children:"import { WorkflowNodeRegistry, ValidateTrigger } from '@flowgram.ai/free-layout-editor';\n\n/**\n * You can customize your own node registry\n * 你可以自定义节点的注册器\n */\nexport const nodeRegistries: WorkflowNodeRegistry[] = [\n  {\n    type: 'start',\n    meta: {\n      isStart: true, // 标记为开始节点\n      deleteDisable: true, // 开始节点不能删除\n      copyDisable: true, // 开始节点不能复制\n      defaultPorts: [{ type: 'output' }], // 用于定义节点的输入和输出端口, 开始节点只有输出端口\n      // dynamicPort: true, // 用于动态端口，会寻找 data-port-id 和 data-port-type 属性的 dom 作为端口\n    },\n    /**\n     * 配置节点表单的校验及渲染,\n     * 注：validate 采用数据和渲染分离，保证节点即使不渲染也能对数据做校验\n     */\n    formMeta: {\n      validateTrigger: ValidateTrigger.onChange,\n      validate: {\n        title: ({ value }) => (value ? undefined : 'Title is required'),\n      },\n      /**\n       * Render form\n       */\n      render: () => (\n       <>\n          <Field name=\"title\">\n            {({ field }) => <div className=\"demo-free-node-title\">{field.value}</div>}\n          </Field>\n          <Field name=\"content\">\n            {({ field }) => <input onChange={field.onChange} value={field.value}/>}\n          </Field>\n        </>\n      )\n    },\n  },\n  {\n    type: 'end',\n    meta: {\n      deleteDisable: true,\n      copyDisable: true,\n      defaultPorts: [{ type: 'input' }],\n    },\n    formMeta: {\n      // ...\n    }\n  },\n  {\n    type: 'custom',\n    meta: {\n    },\n    formMeta: {\n      // ...\n    },\n    defaultPorts: [{ type: 'output' }, { type: 'input' }], // 普通节点有两个端口\n  },\n];\n\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"5-渲染节点",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-渲染节点",children:"#"}),"5. 渲染节点"]}),"\n",(0,r.jsx)(n.p,{children:"渲染节点用于添加样式、事件及表单渲染的位置"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:'pure title="base-node.tsx"',children:"import { useNodeRender, WorkflowNodeRenderer } from '@flowgram.ai/free-layout-editor';\n\nexport const BaseNode = () => {\n  /**\n   * 提供节点渲染相关的方法\n   */\n  const { form } = useNodeRender()\n  /**\n   * WorkflowNodeRenderer 会添加节点拖拽事件及 端口渲染，如果要深度定制，可以看该组件源代码:\n   * https://github.com/flowgram-ai/flowgram.ai/blob/main/packages/client/free-layout-editor/src/components/workflow-node-renderer.tsx\n   */\n  return (\n    <WorkflowNodeRenderer className=\"demo-free-node\" node={props.node}>\n      {\n        // 表单渲染通过 formMeta 生成\n        form?.render()\n      }\n    </WorkflowNodeRenderer>\n  )\n};\n\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"6-添加工具",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-添加工具",children:"#"}),"6. 添加工具"]}),"\n",(0,r.jsxs)(n.p,{children:["工具主要用于控制画布缩放等操作, 工具汇总在 ",(0,r.jsx)(n.code,{children:"usePlaygroundTools"})," 中, 而 ",(0,r.jsx)(n.code,{children:"useClientContext"})," 用于获取画布的上下文, 里边包含画布的核心模块如 ",(0,r.jsx)(n.code,{children:"history"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:'pure title="tools.tsx"',children:"import { useEffect, useState } from 'react'\nimport { usePlaygroundTools, useClientContext } from '@flowgram.ai/free-layout-editor';\n\nexport function Tools() {\n  const { history } = useClientContext();\n  const tools = usePlaygroundTools();\n  const [canUndo, setCanUndo] = useState(false);\n  const [canRedo, setCanRedo] = useState(false);\n\n  useEffect(() => {\n    const disposable = history.undoRedoService.onChange(() => {\n      setCanUndo(history.canUndo());\n      setCanRedo(history.canRedo());\n    });\n    return () => disposable.dispose();\n  }, [history]);\n\n  return <div style={{ position: 'absolute', zIndex: 10, bottom: 16, left: 226, display: 'flex', gap: 8 }}>\n    <button onClick={() => tools.zoomin()}>ZoomIn</button>\n    <button onClick={() => tools.zoomout()}>ZoomOut</button>\n    <button onClick={() => tools.fitView()}>Fitview</button>\n    <button onClick={() => tools.autoLayout()}>AutoLayout</button>\n    <button onClick={() => history.undo()} disabled={!canUndo}>Undo</button>\n    <button onClick={() => history.redo()} disabled={!canRedo}>Redo</button>\n    <span>{Math.floor(tools.zoom * 100)}%</span>\n  </div>\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"7-效果",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-效果",children:"#"}),"7. 效果"]}),"\n","\n",(0,r.jsx)("div",{style:{position:"relative",width:"100%",height:"600px"},children:(0,r.jsx)(i.C1,{})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(s,e)})):s(e)}let a=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["zh%2Fguide%2Fgetting-started%2Fcreate-free-layout-simple.mdx"]={toc:[{id:"1-画布入口",text:"1. 画布入口",depth:3},{id:"2-配置画布",text:"2. 配置画布",depth:3},{id:"3-配置数据",text:"3. 配置数据",depth:3},{id:"4-声明节点",text:"4. 声明节点",depth:3},{id:"5-渲染节点",text:"5. 渲染节点",depth:3},{id:"6-添加工具",text:"6. 添加工具",depth:3},{id:"7-效果",text:"7. 效果",depth:3}],title:"创建自由布局画布",frontmatter:{}}}}]);