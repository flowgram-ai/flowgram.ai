"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["171458"],{600039:function(n,e,i){i.r(e),i.d(e,{default:function(){return s}});var t=i(110239),o=i(444827);function r(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",pre:"pre",code:"code"},(0,o.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h1,{id:"自定义插件",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义插件",children:"#"}),"自定义插件"]}),"\n",(0,t.jsxs)(e.h2,{id:"插件的生命周期说明",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#插件的生命周期说明",children:"#"}),"插件的生命周期说明"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",meta:"pure",children:"\n/**\n  * from: https://github.com/flowgram-ai/flowgram.ai/blob/main/packages/canvas-engine/core/src/plugin/plugin.ts\n */\nimport { ContainerModule, interfaces } from 'inversify';\n\nexport interface PluginBindConfig {\n  bind: interfaces.Bind;\n  unbind: interfaces.Unbind;\n  isBound: interfaces.IsBound;\n  rebind: interfaces.Rebind;\n}\nexport interface PluginConfig<Opts, CTX extends PluginContext = PluginContext> {\n  /**\n   * 插件 IOC 注册, 等价于 containerModule\n   * @param ctx\n   */\n  onBind?: (bindConfig: PluginBindConfig, opts: Opts) => void;\n  /**\n   * 画布注册阶段\n   */\n  onInit?: (ctx: CTX, opts: Opts) => void;\n  /**\n   * 画布准备阶段，一般用于 dom 事件注册等\n   */\n  onReady?: (ctx: CTX, opts: Opts) => void;\n  /**\n   * 画布销毁阶段\n   */\n  onDispose?: (ctx: CTX, opts: Opts) => void;\n  /**\n   * 画布所有 layer 渲染结束\n   */\n  onAllLayersRendered?: (ctx: CTX, opts: Opts) => void;\n  /**\n   * IOC 模块，用于更底层的插件扩展\n   */\n  containerModules?: interfaces.ContainerModule[];\n}\n\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"创建插件",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#创建插件",children:"#"}),"创建插件"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",meta:"pure",children:"/**\n * 如果希望插件固定布局和自由布局都能使用， 请只用\n*  import { definePluginCreator } from '@flowgram.ai/core'\n */\nimport { definePluginCreator, FixedLayoutPluginContext } from '@flowgram.ai/fixed-layout-editor'\n\nexport interface MyPluginOptions {\n  opt1: string;\n}\n\nexport const createMyPlugin = definePluginCreator<MyPluginOptions, FixedLayoutPluginContext>({\n  onBind: (bindConfig, opts) => {\n    // 注册 IOC 模块, Service 如何定义 见 自定义 Service\n    bindConfig.bind(MyService).toSelf().inSingletonScope()\n  },\n  onInit: (ctx, opts) => {\n    // 插件配置\n    console.log(opts.opt1)\n    // ctx 对应 FixedLayoutPluginContext 或者 FreeLayoutPluginContext\n    console.log(ctx.document)\n    console.log(ctx.playground)\n    console.log(ctx.get<MyService>(MyService)) // 获取 IOC 模块\n  },\n});\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"添加插件",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#添加插件",children:"#"}),"添加插件"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",meta:'pure title="use-editor-props.ts"',children:"\n// EditorProps\n{\n  plugins: () => [\n    createMyPlugin({\n      opt1: 'xxx'\n    })\n  ]\n}\n"})})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(r,n)})):r(n)}let s=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["zh%2Fguide%2Fadvanced%2Fcustom-plugin.mdx"]={toc:[{id:"插件的生命周期说明",text:"插件的生命周期说明",depth:2},{id:"创建插件",text:"创建插件",depth:2},{id:"添加插件",text:"添加插件",depth:2}],title:"自定义插件",frontmatter:{}}}}]);