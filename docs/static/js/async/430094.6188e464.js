"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["430094"],{935291:function(e,n,t){t.r(n),t.d(n,{default:function(){return d}});var o=t(110239),r=t(444827),s=t(156973);function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h3:"h3",ul:"ul",li:"li",pre:"pre",div:"div"},(0,r.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h1,{id:"create-a-free-layout-canvas",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#create-a-free-layout-canvas",children:"#"}),"Create a Free Layout Canvas"]}),"\n",(0,o.jsxs)(n.p,{children:["This case can be installed via ",(0,o.jsx)(n.code,{children:"npx @flowgram.ai/create-app@latest free-layout-simple"}),". For complete code and effects, see:"]}),"\n",(0,o.jsx)("div",{className:"rs-tip",children:(0,o.jsx)("a",{className:"rs-link",href:"/flowgram.ai/examples/free-layout/free-layout-simple.html",children:(0,o.jsx)(n.p,{children:"Free Layout Basic Usage"})})}),"\n",(0,o.jsxs)(n.h3,{id:"1-canvas-entry",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-canvas-entry",children:"#"}),"1. Canvas Entry"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"FreeLayoutEditorProvider"}),": Canvas configurator that generates react-context internally for child component consumption"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"EditorRenderer"}),": The final rendered canvas that can be wrapped under other components for convenient canvas positioning"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",meta:'pure title="app.tsx"',children:"\nimport {\n  FreeLayoutEditorProvider,\n  EditorRenderer,\n} from '@flowgram.ai/free-layout-editor';\n\nimport { useEditorProps } from './use-editor-props' // Detailed canvas props configuration\nimport { Tools } from './tools' // Canvas tools\n\nfunction App() {\n  const editorProps = useEditorProps()\n  return (\n    <FixedLayoutEditorProvider {...editorProps}>\n      <EditorRenderer className=\"demo-editor\" />\n      <Tools />\n    </FixedLayoutEditorProvider>\n  );\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"2-configure-canvas",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-configure-canvas",children:"#"}),"2. Configure Canvas"]}),"\n",(0,o.jsx)(n.p,{children:"Canvas configuration is declarative, providing data, rendering, event, and plugin-related configurations"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",meta:'pure title="use-editor-props.tsx"',children:"import { useMemo } from 'react';\nimport { type FixedLayoutProps } from '@flowgram.ai/free-layout-editor';\nimport { createMinimapPlugin } from '@flowgram.ai/minimap-plugin';\n\nimport { intialData } from './initial-data' // 初始化数据\nimport { nodeRegistries } from './node-registries' // 节点声明配置\nimport { BaseNode } from './base-node' // 节点渲染\n\nexport function useEditorProps(\n): FixedLayoutProps {\n  return useMemo<FixedLayoutProps>(\n    () => ({\n      /**\n       * Initialize data\n       */\n      initialData,\n      /**\n       * Canvas node definitions\n       */\n      nodeRegistries,\n      /**\n       * Materials\n       */\n      materials: {\n        renderDefaultNode: BaseNode, // Node rendering component\n      },\n      /**\n       * Node engine, used for rendering node forms\n       */\n      nodeEngine: {\n        enable: true,\n      },\n      /**\n       * Canvas history record, used to control redo/undo\n       */\n      history: {\n        enable: true,\n        enableChangeNode: true, // Used to monitor node form data changes\n      },\n      /**\n       * Canvas initialization callback\n       */\n      onInit: ctx => {\n        // If you need to load data dynamically, you can execute asynchronously using the following method\n        // ctx.docuemnt.fromJSON(initialData)\n      },\n      /**\n       * Callback when canvas first renders completely\n       */\n      onAllLayersRendered: (ctx) => {},\n      /**\n       * Canvas destruction callback\n       */\n      onDispose: () => { },\n      plugins: () => [\n        /**\n         * Minimap plugin\n         */\n        createMinimapPlugin({}),\n      ],\n    }),\n    [],\n  );\n}\n\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"3-configure-data",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-configure-data",children:"#"}),"3. Configure Data"]}),"\n",(0,o.jsx)(n.p,{children:"Canvas document data uses a tree structure and supports nesting"}),"\n",(0,o.jsxs)(n.div,{className:"rspress-directive note",children:[(0,o.jsx)(n.div,{className:"rspress-directive-title",children:"Document Data Basic Structure:"}),(0,o.jsx)(n.div,{className:"rspress-directive-content",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["nodes ",(0,o.jsx)(n.code,{children:"array"})," Node list, supports nesting"]}),"\n",(0,o.jsxs)(n.li,{children:["edges ",(0,o.jsx)(n.code,{children:"array"})," Edge list"]}),"\n"]})})]}),"\n",(0,o.jsxs)(n.div,{className:"rspress-directive note",children:[(0,o.jsx)(n.div,{className:"rspress-directive-title",children:"Node Data Basic Structure:"}),(0,o.jsx)(n.div,{className:"rspress-directive-content",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["id: ",(0,o.jsx)(n.code,{children:"string"})," Unique node identifier, must ensure uniqueness"]}),"\n",(0,o.jsxs)(n.li,{children:["meta: ",(0,o.jsx)(n.code,{children:"object"})," Node UI configuration information, such as free layout ",(0,o.jsx)(n.code,{children:"position"})," information goes here"]}),"\n",(0,o.jsxs)(n.li,{children:["type: ",(0,o.jsx)(n.code,{children:"string | number"})," Node type, corresponds to ",(0,o.jsx)(n.code,{children:"type"})," in ",(0,o.jsx)(n.code,{children:"nodeRegistries"})]}),"\n",(0,o.jsxs)(n.li,{children:["data: ",(0,o.jsx)(n.code,{children:"object"})," Node form data, business can customize"]}),"\n",(0,o.jsxs)(n.li,{children:["blocks: ",(0,o.jsx)(n.code,{children:"array"})," Node branches, using ",(0,o.jsx)(n.code,{children:"block"})," is closer to ",(0,o.jsx)(n.code,{children:"Gramming"})]}),"\n"]})})]}),"\n",(0,o.jsxs)(n.div,{className:"rspress-directive note",children:[(0,o.jsx)(n.div,{className:"rspress-directive-title",children:"Edge Data Basic Structure:"}),(0,o.jsx)(n.div,{className:"rspress-directive-content",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["sourceNodeID: ",(0,o.jsx)(n.code,{children:"string"})," Start node id"]}),"\n",(0,o.jsxs)(n.li,{children:["targetNodeID: ",(0,o.jsx)(n.code,{children:"string"})," Target node id"]}),"\n",(0,o.jsxs)(n.li,{children:["sourcePortID?: ",(0,o.jsx)(n.code,{children:"string | number"})," Start port id, defaults to start node's default port if omitted"]}),"\n",(0,o.jsxs)(n.li,{children:["targetPortID?: ",(0,o.jsx)(n.code,{children:"string | number"})," Target port id, defaults to target node's default port if omitted"]}),"\n"]})})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",meta:'pure title="initial-data.tsx"',children:"import { WorkflowJSON } from '@flowgram.ai/free-layout-editor';\n\nexport const initialData: WorkflowJSON = {\n  nodes: [\n    {\n      id: 'start_0',\n      type: 'start',\n      meta: {\n        position: { x: 0, y: 0 },\n      },\n      data: {\n        title: 'Start',\n        content: 'Start content'\n      },\n    },\n    {\n      id: 'node_0',\n      type: 'custom',\n      meta: {\n        position: { x: 400, y: 0 },\n      },\n      data: {\n        title: 'Custom',\n        content: 'Custom node content'\n      },\n    },\n    {\n      id: 'end_0',\n      type: 'end',\n      meta: {\n        position: { x: 800, y: 0 },\n      },\n      data: {\n        title: 'End',\n        content: 'End content'\n      },\n    },\n  ],\n  edges: [\n    {\n      sourceNodeID: 'start_0',\n      targetNodeID: 'node_0',\n    },\n    {\n      sourceNodeID: 'node_0',\n      targetNodeID: 'end_0',\n    },\n  ],\n};\n\n\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"4-declare-nodes",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-declare-nodes",children:"#"}),"4. Declare Nodes"]}),"\n",(0,o.jsx)(n.p,{children:"Node declaration can be used to determine node types and rendering methods"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",meta:'pure title="node-registries.tsx"',children:"import { WorkflowNodeRegistry, ValidateTrigger } from '@flowgram.ai/free-layout-editor';\n\n/**\n * You can customize your own node registry\n */\nexport const nodeRegistries: WorkflowNodeRegistry[] = [\n  {\n    type: 'start',\n    meta: {\n      isStart: true, // Mark as start node\n      deleteDisable: true, // Start node cannot be deleted\n      copyDisable: true, // Start node cannot be copied\n      defaultPorts: [{ type: 'output' }], // Used to define node input and output ports, start node only has output port\n      // dynamicPort: true, // Used for dynamic ports, will look for DOM elements with data-port-id and data-port-type attributes as ports\n    },\n    /**\n     * Configure node form validation and rendering,\n     * Note: validate uses data and rendering separation to ensure nodes can validate data even without rendering\n     */\n    formMeta: {\n      validateTrigger: ValidateTrigger.onChange,\n      validate: {\n        title: ({ value }) => (value ? undefined : 'Title is required'),\n      },\n      /**\n       * Render form\n       */\n      render: () => (\n       <>\n          <Field name=\"title\">\n            {({ field }) => <div className=\"demo-free-node-title\">{field.value}</div>}\n          </Field>\n          <Field name=\"content\">\n            {({ field }) => <input onChange={field.onChange} value={field.value}/>}\n          </Field>\n        </>\n      )\n    },\n  },\n  {\n    type: 'end',\n    meta: {\n      deleteDisable: true,\n      copyDisable: true,\n      defaultPorts: [{ type: 'input' }],\n    },\n    formMeta: {\n      // ...\n    }\n  },\n  {\n    type: 'custom',\n    meta: {\n    },\n    formMeta: {\n      // ...\n    },\n    defaultPorts: [{ type: 'output' }, { type: 'input' }], // 普通节点有两个端口\n  },\n];\n\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"5-render-nodes",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-render-nodes",children:"#"}),"5. Render Nodes"]}),"\n",(0,o.jsx)(n.p,{children:"Rendering nodes is used for adding styles, events, and form rendering positions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",meta:'pure title="base-node.tsx"',children:"import { useNodeRender, WorkflowNodeRenderer } from '@flowgram.ai/free-layout-editor';\n\nexport const BaseNode = () => {\n  /**\n   * Provides node rendering related methods\n   */\n  const { form } = useNodeRender()\n  /**\n   * WorkflowNodeRenderer will add node drag events and port rendering, for deep customization, \n   * you can check the component source code at:\n   * https://github.com/flowgram-ai/flowgram.ai/blob/main/packages/client/free-layout-editor/src/components/workflow-node-renderer.tsx\n   */\n  return (\n    <WorkflowNodeRenderer className=\"demo-free-node\" node={props.node}>\n      {\n        // Form rendering is generated through formMeta\n        form?.render()\n      }\n    </WorkflowNodeRenderer>\n  )\n};\n\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"6-add-tools",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-add-tools",children:"#"}),"6. Add Tools"]}),"\n",(0,o.jsxs)(n.p,{children:["Tools are mainly used to control canvas zooming and other operations. Tools are consolidated in ",(0,o.jsx)(n.code,{children:"usePlaygroundTools"}),", while ",(0,o.jsx)(n.code,{children:"useClientContext"})," is used to get the canvas context, which contains core modules such as ",(0,o.jsx)(n.code,{children:"history"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",meta:'pure title="tools.tsx"',children:"import { useEffect, useState } from 'react'\nimport { usePlaygroundTools, useClientContext } from '@flowgram.ai/free-layout-editor';\n\nexport function Tools() {\n  const { history } = useClientContext();\n  const tools = usePlaygroundTools();\n  const [canUndo, setCanUndo] = useState(false);\n  const [canRedo, setCanRedo] = useState(false);\n\n  useEffect(() => {\n    const disposable = history.undoRedoService.onChange(() => {\n      setCanUndo(history.canUndo());\n      setCanRedo(history.canRedo());\n    });\n    return () => disposable.dispose();\n  }, [history]);\n\n  return <div style={{ position: 'absolute', zIndex: 10, bottom: 16, left: 226, display: 'flex', gap: 8 }}>\n    <button onClick={() => tools.zoomin()}>ZoomIn</button>\n    <button onClick={() => tools.zoomout()}>ZoomOut</button>\n    <button onClick={() => tools.fitView()}>Fitview</button>\n    <button onClick={() => tools.autoLayout()}>AutoLayout</button>\n    <button onClick={() => history.undo()} disabled={!canUndo}>Undo</button>\n    <button onClick={() => history.redo()} disabled={!canRedo}>Redo</button>\n    <span>{Math.floor(tools.zoom * 100)}%</span>\n  </div>\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"7-effect",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-effect",children:"#"}),"7. Effect"]}),"\n","\n",(0,o.jsx)("div",{style:{position:"relative",width:"100%",height:"600px"},children:(0,o.jsx)(s.C1,{})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(a,e)})):a(e)}let d=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["en%2Fguide%2Fgetting-started%2Fcreate-free-layout-simple.mdx"]={toc:[{id:"1-canvas-entry",text:"1. Canvas Entry",depth:3},{id:"2-configure-canvas",text:"2. Configure Canvas",depth:3},{id:"3-configure-data",text:"3. Configure Data",depth:3},{id:"4-declare-nodes",text:"4. Declare Nodes",depth:3},{id:"5-render-nodes",text:"5. Render Nodes",depth:3},{id:"6-add-tools",text:"6. Add Tools",depth:3},{id:"7-effect",text:"7. Effect",depth:3}],title:"Create a Free Layout Canvas",frontmatter:{}}}}]);