"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["641704"],{29586:function(e,n,d){d.r(n),d.d(n,{default:function(){return a}});var r=d(110239),o=d(444827);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",div:"div",h2:"h2",h3:"h3"},(0,o.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"flowdocument",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#flowdocument",children:"#"}),"FlowDocument"]}),"\n",(0,r.jsx)(n.p,{children:"流程数据文档 (固定布局), 存储流程的所有节点数据"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://flowgram-ai.github.io/flowgram.ai/auto-docs/document/classes/FlowDocument.html",rel:"noopener noreferrer",target:"_blank",children:"> API Detail"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"import { useClientContext } from '@flowgram.ai/fixed-layout-editor'\n\nconst ctx = useClientContext();\nconsole.log(ctx.document)\n"})}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive danger",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"DANGER"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["\n对节点的操作最好通过 ",(0,r.jsx)(n.a,{href:"/api/services/flow-operation-service.html",children:"ctx.operation"}),"进行操作, 这样才能绑定到 redo/undo"]})})]}),"\n",(0,r.jsxs)(n.h2,{id:"root",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#root",children:"#"}),"root"]}),"\n",(0,r.jsx)(n.p,{children:"获取画布的根节点，所有节点都挂在根节点下边"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"console.log(ctx.document.root);\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"origintree",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#origintree",children:"#"}),"originTree"]}),"\n",(0,r.jsx)(n.p,{children:"画布真实的节点树"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"// 监听节点树的变化，如 节点添加/删除/移动\nconst refresh = useRefresh()\nuseEffect(() => {\n  const toDispose = ctx.document.originTree.onTreeChange(() => {\n    // Tree Change\n    refresh()\n  });\n  return () => toDispose.dispose()\n}, [])\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"rendertree",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rendertree",children:"#"}),"renderTree"]}),"\n",(0,r.jsx)(n.p,{children:"画布渲染时的节点树，为了提升性能，渲染的树会随着节点分支折叠而变化，并非真实的树"}),"\n",(0,r.jsxs)(n.h2,{id:"getallnodes",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getallnodes",children:"#"}),"getAllNodes"]}),"\n",(0,r.jsx)(n.p,{children:"获取所有节点数据"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"const nodes = ctx.document.getAllNodes();\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"getnode",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getnode",children:"#"}),"getNode"]}),"\n",(0,r.jsx)(n.p,{children:"通过指定 id 获取节点"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"ctx.document.getNode('start')\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"getnoderegistry",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getnoderegistry",children:"#"}),"getNodeRegistry"]}),"\n",(0,r.jsx)(n.p,{children:"获取节点的定义, 节点定义可以根据业务自己扩展配置项"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"const startNodeRegistry = ctx.document.getNodeRegistry<FlowNodeRegistry>('start')\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"fromjsontojson",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fromjsontojson",children:"#"}),"fromJSON/toJSON"]}),"\n",(0,r.jsx)(n.p,{children:"导入和导出数据"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"const json = ctx.document.toJSON();\nctx.document.fromJSON(json);\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"registerflownodes",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#registerflownodes",children:"#"}),"registerFlowNodes"]}),"\n",(0,r.jsx)(n.p,{children:"注册节点的配置项目, 支持继承"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"const node1: FlowNodeRegistry = {\n  type: 'node1',\n  meta: {}\n}\n\nconst node2: FlowNodeRegistry = {\n  type: 'node2',\n  extend: 'node1' // 继承 node1 的配置\n}\nctx.document.registerFlowNodes(node1, node2)\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"addnode",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#addnode",children:"#"}),"addNode"]}),"\n",(0,r.jsx)(n.p,{children:"添加节点"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"ctx.document.addNode({\n  id: 'node1',\n  type: 'start',\n  meta: {},\n  data: {},\n  parent: ctx.document.root // 可以指定父节点\n});\n\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"addfromnode",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#addfromnode",children:"#"}),"addFromNode"]}),"\n",(0,r.jsx)(n.p,{children:"添加到指定节点的后边"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"ctx.document.addFromNode(\n ctx.document.getNode('start'),\n { id: 'node1', type: 'custom', data: {} }\n);\n\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"addblock",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#addblock",children:"#"}),"addBlock"]}),"\n",(0,r.jsx)(n.p,{children:"为指定节点添加分支节点"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"\nctx.document.addBlock(ctx.document.getNode('condition'), { id: 'if_1', type: 'block', data: {} })\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"removenode",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#removenode",children:"#"}),"removeNode"]}),"\n",(0,r.jsx)(n.p,{children:"删除节点"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"ctx.document.removeNode('node1');\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"onnodecreateonnodeupdateonnodedispose",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#onnodecreateonnodeupdateonnodedispose",children:"#"}),"onNodeCreate/onNodeUpdate/onNodeDispose"]}),"\n",(0,r.jsx)(n.p,{children:"节点创建/更新/销毁事件, 返回事件的注销函数"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"\nuseEffect(() => {\n  const toDispose1 = ctx.document.onNodeCreate((node) => {\n    console.log('onNodeCreate', node);\n  });\n  const toDispose2 = ctx.document.onNodeUpdate((node) => {\n    console.log('onNodeUpdate', node);\n  });\n  const toDispose3 = ctx.document.onNodeDispose((node) => {\n    console.log('onNodeDispose', node);\n  });\n  return () => {\n    toDispose1.dispose()\n    toDispose2.dispose()\n    toDispose3.dispose()\n  }\n}, []);\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"traverse",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#traverse",children:"#"}),"traverse"]}),"\n",(0,r.jsx)(n.p,{children:"从指定节点遍历所有子节点, 默认根节点"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"/**\n *\n * traverse all nodes, O(n)\n *   R\n *   |\n *   +---1\n *   |   |\n *   |   +---1.1\n *   |   |\n *   |   +---1.2\n *   |   |\n *   |   +---1.3\n *   |   |    |\n *   |   |    +---1.3.1\n *   |   |    |\n *   |   |    +---1.3.2\n *   |   |\n *   |   +---1.4\n *   |\n *   +---2\n *       |\n *       +---2.1\n *\n *  sort: [1, 1.1, 1.2, 1.3, 1.3.1, 1.3.2, 1.4, 2, 2.1]\n */\nctx.document.traverse((node, depth, index) => {\n  console.log(node.id);\n}, ctx.document.root);\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"tostring",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tostring",children:"#"}),"toString"]}),"\n",(0,r.jsx)(n.p,{children:"返回节点结构的字符串快照"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"console.log(ctx.document.toString())\n"})})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(s,e)})):s(e)}let a=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["zh%2Fapi%2Fcore%2Fflow-document.mdx"]={toc:[{id:"root",text:"root",depth:2},{id:"origintree",text:"originTree",depth:2},{id:"rendertree",text:"renderTree",depth:3},{id:"getallnodes",text:"getAllNodes",depth:2},{id:"getnode",text:"getNode",depth:2},{id:"getnoderegistry",text:"getNodeRegistry",depth:2},{id:"fromjsontojson",text:"fromJSON/toJSON",depth:2},{id:"registerflownodes",text:"registerFlowNodes",depth:2},{id:"addnode",text:"addNode",depth:2},{id:"addfromnode",text:"addFromNode",depth:2},{id:"addblock",text:"addBlock",depth:2},{id:"removenode",text:"removeNode",depth:2},{id:"onnodecreateonnodeupdateonnodedispose",text:"onNodeCreate/onNodeUpdate/onNodeDispose",depth:2},{id:"traverse",text:"traverse",depth:2},{id:"tostring",text:"toString",depth:2}],title:"FlowDocument",frontmatter:{}}}}]);