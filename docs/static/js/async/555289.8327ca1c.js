"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["555289"],{945491:function(e,n,a){a.r(n),a.d(n,{default:function(){return i}});var r=a(110239),s=a(444827);function o(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"自由布局线条",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自由布局线条",children:"#"}),"自由布局线条"]}),"\n",(0,r.jsxs)(n.p,{children:["自由布局的线条通过 ",(0,r.jsx)(n.a,{href:"/flowgram.ai/api/core/workflow-lines-manager.html",children:"WorkflowLinesManager"})," 管理"]}),"\n",(0,r.jsxs)(n.h2,{id:"获取当前节点的输入输出节点",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#获取当前节点的输入输出节点",children:"#"}),"获取当前节点的输入/输出节点"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"import { WorkflowNodeLinesData } from '@flowgram.ai/free-layout-editor'\n\n// 获取当前节点的输入节点（通过连接线计算）\nnode.geData(WorkflowNodeLinesData).inputNodes\n// 获取所有输入节点 （会往上递归获取所有）\nnode.geData(WorkflowNodeLinesData).allInputNodes\n// 获取输出节点\nnode.geData(WorkflowNodeLinesData).outputNodes\n// 获取所有输出节点\nnode.geData(WorkflowNodeLinesData).allOutputNodes\n\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"节点监听自身的连线变化并刷新",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#节点监听自身的连线变化并刷新",children:"#"}),"节点监听自身的连线变化并刷新"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure",children:"\nimport {\n  useRefresh,\n  WorkflowNodeLinesData,\n} from '@flowgram.ai/free-layout-editor';\n\nfunction NodeRender({ node }) {\n  const refresh = useRefresh()\n  const linesData = node.get(WorkflowNodeLinesData)\n  useEffect(() => {\n    const dispose = linesData.onDataChange(() => refresh())\n    return () => dispose.dispose()\n  }, [])\n  return <div>xxxx</div>\n}\n\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"监听所有线条的连线变化",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#监听所有线条的连线变化",children:"#"}),"监听所有线条的连线变化"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:"pure",children:"import { useEffect } from 'react'\nimport { useClientContext, useRefresh } from '@flowgram.ai/free-layout-editor'\n\n\nfunction SomeReact() {\n  const refresh = useRefresh()\n  const linesManager = useClientContext().document.linesManager\n  useEffect(() => {\n      const dispose = linesManager.onAvailableLinesChange(() => refresh())\n      return () => dispose.dispose()\n  }, [])\n  console.log(ctx.document.linesManager.getAllLines())\n}\n"})})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(o,e)})):o(e)}let i=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["zh%2Fguide%2Fadvanced%2Flines.mdx"]={toc:[{id:"获取当前节点的输入输出节点",text:"获取当前节点的输入/输出节点",depth:2},{id:"节点监听自身的连线变化并刷新",text:"节点监听自身的连线变化并刷新",depth:2},{id:"监听所有线条的连线变化",text:"监听所有线条的连线变化",depth:2}],title:"自由布局线条",frontmatter:{}}}}]);